
RX_64_Capston.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000011ac  00001240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  0080015c  0080015c  0000129c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c3  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d04  00000000  00000000  00002aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b91  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000830  00000000  00000000  000045e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d63  00000000  00000000  00004e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c4       	rjmp	.+2136   	; 0x8a2 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ea       	ldi	r30, 0xAC	; 172
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 35       	cpi	r26, 0x5C	; 92
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac e5       	ldi	r26, 0x5C	; 92
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 36       	cpi	r26, 0x68	; 104
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	27 d0       	rcall	.+78     	; 0x112 <main>
      c4:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Interrupt_init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void Interrupt_init(void)
{
	EICRB = (1 << ISC41) | (0 << ISC41);
      ca:	82 e0       	ldi	r24, 0x02	; 2
      cc:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT4);
      ce:	80 e1       	ldi	r24, 0x10	; 16
      d0:	89 bf       	out	0x39, r24	; 57
      d2:	08 95       	ret

000000d4 <__vector_5>:
#define OFF 0
int start = 0;
int INIT = 0;

ISR (INT4_vect)
{
      d4:	1f 92       	push	r1
      d6:	0f 92       	push	r0
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	0f 92       	push	r0
      dc:	11 24       	eor	r1, r1
      de:	2f 93       	push	r18
      e0:	8f 93       	push	r24
      e2:	9f 93       	push	r25
	INIT = 1;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
      ec:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f0:	2f ef       	ldi	r18, 0xFF	; 255
      f2:	81 ee       	ldi	r24, 0xE1	; 225
      f4:	94 e0       	ldi	r25, 0x04	; 4
      f6:	21 50       	subi	r18, 0x01	; 1
      f8:	80 40       	sbci	r24, 0x00	; 0
      fa:	90 40       	sbci	r25, 0x00	; 0
      fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_5+0x22>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_5+0x2c>
     100:	00 00       	nop
	_delay_ms(100);
}
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	2f 91       	pop	r18
     108:	0f 90       	pop	r0
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	0f 90       	pop	r0
     10e:	1f 90       	pop	r1
     110:	18 95       	reti

00000112 <main>:

int main(void)
{
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	ee 97       	sbiw	r28, 0x3e	; 62
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
	char* c;
	DDRD = 0xff;
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	81 bb       	out	0x11, r24	; 17
//	DDRA = 0xff;
	sei();
     12a:	78 94       	sei
	Interrupt_init();
     12c:	ce df       	rcall	.-100    	; 0xca <Interrupt_init>
	UART0_init(115200);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	72 ec       	ldi	r23, 0xC2	; 194
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	c7 d3       	rcall	.+1934   	; 0x8c6 <UART0_init>
	uart_mx_init(1);
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	5d d2       	rcall	.+1210   	; 0x5f8 <uart_mx_init>
	DDRE = 0b00000011;
     13e:	43 e0       	ldi	r20, 0x03	; 3
     140:	42 b9       	out	0x02, r20	; 2
	DDRA = 0b00001111;
     142:	8f e0       	ldi	r24, 0x0F	; 15
     144:	8a bb       	out	0x1a, r24	; 26
     146:	2f ef       	ldi	r18, 0xFF	; 255
     148:	87 ea       	ldi	r24, 0xA7	; 167
     14a:	91 e6       	ldi	r25, 0x61	; 97
     14c:	21 50       	subi	r18, 0x01	; 1
     14e:	80 40       	sbci	r24, 0x00	; 0
     150:	90 40       	sbci	r25, 0x00	; 0
     152:	e1 f7       	brne	.-8      	; 0x14c <main+0x3a>
     154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x44>
     156:	00 00       	nop
//	mx_position(180, 0x05);
//	_delay_ms(2000);
//	mx_position(130, 0x05);	
//	_delay_ms(2000);
//	mx_position(150, 0x05);
	All_Control_TEST(
     158:	1f 92       	push	r1
     15a:	32 e3       	ldi	r19, 0x32	; 50
     15c:	3f 93       	push	r19
     15e:	1f 92       	push	r1
     160:	26 e9       	ldi	r18, 0x96	; 150
     162:	2f 93       	push	r18
     164:	1f 92       	push	r1
     166:	90 e2       	ldi	r25, 0x20	; 32
     168:	9f 93       	push	r25
     16a:	1f 92       	push	r1
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	8f 93       	push	r24
     170:	1f 92       	push	r1
     172:	8f 93       	push	r24
     174:	1f 92       	push	r1
     176:	55 e0       	ldi	r21, 0x05	; 5
     178:	5f 93       	push	r21
     17a:	1f 92       	push	r1
     17c:	3f 93       	push	r19
     17e:	1f 92       	push	r1
     180:	2f 93       	push	r18
     182:	1f 92       	push	r1
     184:	9f 93       	push	r25
     186:	1f 92       	push	r1
     188:	8f 93       	push	r24
     18a:	1f 92       	push	r1
     18c:	8f 93       	push	r24
     18e:	1f 92       	push	r1
     190:	54 e0       	ldi	r21, 0x04	; 4
     192:	5f 93       	push	r21
     194:	1f 92       	push	r1
     196:	3f 93       	push	r19
     198:	1f 92       	push	r1
     19a:	2f 93       	push	r18
     19c:	1f 92       	push	r1
     19e:	9f 93       	push	r25
     1a0:	1f 92       	push	r1
     1a2:	8f 93       	push	r24
     1a4:	1f 92       	push	r1
     1a6:	8f 93       	push	r24
     1a8:	1f 92       	push	r1
     1aa:	4f 93       	push	r20
     1ac:	1f 92       	push	r1
     1ae:	3f 93       	push	r19
     1b0:	1f 92       	push	r1
     1b2:	2f 93       	push	r18
     1b4:	1f 92       	push	r1
     1b6:	9f 93       	push	r25
     1b8:	88 24       	eor	r8, r8
     1ba:	83 94       	inc	r8
     1bc:	91 2c       	mov	r9, r1
     1be:	aa 24       	eor	r10, r10
     1c0:	a3 94       	inc	r10
     1c2:	b1 2c       	mov	r11, r1
     1c4:	68 94       	set
     1c6:	cc 24       	eor	r12, r12
     1c8:	c1 f8       	bld	r12, 1
     1ca:	d1 2c       	mov	r13, r1
     1cc:	0f 2e       	mov	r0, r31
     1ce:	f2 e3       	ldi	r31, 0x32	; 50
     1d0:	ef 2e       	mov	r14, r31
     1d2:	f1 2c       	mov	r15, r1
     1d4:	f0 2d       	mov	r31, r0
     1d6:	06 e9       	ldi	r16, 0x96	; 150
     1d8:	10 e0       	ldi	r17, 0x00	; 0
     1da:	20 e2       	ldi	r18, 0x20	; 32
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	41 e0       	ldi	r20, 0x01	; 1
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	1c d2       	rcall	.+1080   	; 0x624 <All_Control_TEST>
     1ec:	af ef       	ldi	r26, 0xFF	; 255
     1ee:	b7 ea       	ldi	r27, 0xA7	; 167
     1f0:	e1 e6       	ldi	r30, 0x61	; 97
     1f2:	a1 50       	subi	r26, 0x01	; 1
     1f4:	b0 40       	sbci	r27, 0x00	; 0
     1f6:	e0 40       	sbci	r30, 0x00	; 0
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0xe0>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xea>
     1fc:	00 00       	nop
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2000);
    while (1)
    {
		if(UART0_gets(buf, bufSize))
		{
			yaw[1] = ((int)(buf[1] - '0')*100 + (int)(buf[2] - '0')*10 + (int)(buf[3] - '0')) - 500;
     208:	0f 2e       	mov	r0, r31
     20a:	f4 e6       	ldi	r31, 0x64	; 100
     20c:	7f 2e       	mov	r7, r31
     20e:	f0 2d       	mov	r31, r0
				{
					yaw[i] = yaw[i] - yaw_init[i] + 150;
					pitch[i] = pitch[i] - pitch_init[i] + 150;
					roll[i] = roll[i] - roll_init[i] + 150;
				}
				printf("Yaw_1 = %d, Pitch_1 = %d, Roll_1 = %d, Yaw_2 = %d, Pitch_2 = %d, Roll_2 = %d\n", -yaw[1], -pitch[1], roll[1], (300 - yaw[2]), (300 - pitch[2]), roll[2]);				
     210:	0f 2e       	mov	r0, r31
     212:	fc e2       	ldi	r31, 0x2C	; 44
     214:	2f 2e       	mov	r2, r31
     216:	33 24       	eor	r3, r3
     218:	33 94       	inc	r3
     21a:	f0 2d       	mov	r31, r0
			All_Control_TEST(
     21c:	0f 2e       	mov	r0, r31
     21e:	f2 e3       	ldi	r31, 0x32	; 50
     220:	5f 2e       	mov	r5, r31
     222:	f0 2d       	mov	r31, r0
     224:	68 94       	set
     226:	44 24       	eor	r4, r4
     228:	45 f8       	bld	r4, 5
     22a:	66 24       	eor	r6, r6
     22c:	63 94       	inc	r6
     22e:	de 01       	movw	r26, r28
     230:	5f 96       	adiw	r26, 0x1f	; 31
     232:	be af       	std	Y+62, r27	; 0x3e
     234:	ad af       	std	Y+61, r26	; 0x3d
	0x04, ON, 1, 32,	150,	50,
	0x05, ON, 1, 32,	150,	50);
	_delay_ms(2000);
    while (1)
    {
		if(UART0_gets(buf, bufSize))
     236:	68 e1       	ldi	r22, 0x18	; 24
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	7b d3       	rcall	.+1782   	; 0x936 <UART0_gets>
     240:	89 2b       	or	r24, r25
     242:	c9 f3       	breq	.-14     	; 0x236 <main+0x124>
		{
			yaw[1] = ((int)(buf[1] - '0')*100 + (int)(buf[2] - '0')*10 + (int)(buf[3] - '0')) - 500;
     244:	4a 81       	ldd	r20, Y+2	; 0x02
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	40 53       	subi	r20, 0x30	; 48
     24a:	51 09       	sbc	r21, r1
     24c:	74 9e       	mul	r7, r20
     24e:	c0 01       	movw	r24, r0
     250:	75 9e       	mul	r7, r21
     252:	90 0d       	add	r25, r0
     254:	11 24       	eor	r1, r1
     256:	2b 81       	ldd	r18, Y+3	; 0x03
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	20 53       	subi	r18, 0x30	; 48
     25c:	31 09       	sbc	r19, r1
     25e:	a9 01       	movw	r20, r18
     260:	44 0f       	add	r20, r20
     262:	55 1f       	adc	r21, r21
     264:	22 0f       	add	r18, r18
     266:	33 1f       	adc	r19, r19
     268:	22 0f       	add	r18, r18
     26a:	33 1f       	adc	r19, r19
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
     270:	24 0f       	add	r18, r20
     272:	35 1f       	adc	r19, r21
     274:	82 0f       	add	r24, r18
     276:	93 1f       	adc	r25, r19
     278:	2c 81       	ldd	r18, Y+4	; 0x04
     27a:	82 0f       	add	r24, r18
     27c:	91 1d       	adc	r25, r1
     27e:	84 52       	subi	r24, 0x24	; 36
     280:	92 40       	sbci	r25, 0x02	; 2
     282:	9c 8f       	std	Y+28, r25	; 0x1c
     284:	8b 8f       	std	Y+27, r24	; 0x1b
			yaw[2] = ((int)(buf[13] - '0')*100 + (int)(buf[14] - '0')*10 + (int)(buf[15] - '0')) - 500;
     286:	6e 85       	ldd	r22, Y+14	; 0x0e
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	60 53       	subi	r22, 0x30	; 48
     28c:	71 09       	sbc	r23, r1
     28e:	76 9e       	mul	r7, r22
     290:	90 01       	movw	r18, r0
     292:	77 9e       	mul	r7, r23
     294:	30 0d       	add	r19, r0
     296:	11 24       	eor	r1, r1
     298:	4f 85       	ldd	r20, Y+15	; 0x0f
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	40 53       	subi	r20, 0x30	; 48
     29e:	51 09       	sbc	r21, r1
     2a0:	ba 01       	movw	r22, r20
     2a2:	66 0f       	add	r22, r22
     2a4:	77 1f       	adc	r23, r23
     2a6:	44 0f       	add	r20, r20
     2a8:	55 1f       	adc	r21, r21
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	44 0f       	add	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	46 0f       	add	r20, r22
     2b4:	57 1f       	adc	r21, r23
     2b6:	24 0f       	add	r18, r20
     2b8:	35 1f       	adc	r19, r21
     2ba:	48 89       	ldd	r20, Y+16	; 0x10
     2bc:	24 0f       	add	r18, r20
     2be:	31 1d       	adc	r19, r1
     2c0:	24 52       	subi	r18, 0x24	; 36
     2c2:	32 40       	sbci	r19, 0x02	; 2
     2c4:	3e 8f       	std	Y+30, r19	; 0x1e
     2c6:	2d 8f       	std	Y+29, r18	; 0x1d
			pitch[1] = ((int)(buf[5] - '0')*100 + (int)(buf[6] - '0')*10 + (int)(buf[7] - '0')) - 500;
     2c8:	6e 81       	ldd	r22, Y+6	; 0x06
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	60 53       	subi	r22, 0x30	; 48
     2ce:	71 09       	sbc	r23, r1
     2d0:	76 9e       	mul	r7, r22
     2d2:	a0 01       	movw	r20, r0
     2d4:	77 9e       	mul	r7, r23
     2d6:	50 0d       	add	r21, r0
     2d8:	11 24       	eor	r1, r1
     2da:	6f 81       	ldd	r22, Y+7	; 0x07
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	60 53       	subi	r22, 0x30	; 48
     2e0:	71 09       	sbc	r23, r1
     2e2:	fb 01       	movw	r30, r22
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	66 0f       	add	r22, r22
     2ea:	77 1f       	adc	r23, r23
     2ec:	66 0f       	add	r22, r22
     2ee:	77 1f       	adc	r23, r23
     2f0:	66 0f       	add	r22, r22
     2f2:	77 1f       	adc	r23, r23
     2f4:	6e 0f       	add	r22, r30
     2f6:	7f 1f       	adc	r23, r31
     2f8:	46 0f       	add	r20, r22
     2fa:	57 1f       	adc	r21, r23
     2fc:	68 85       	ldd	r22, Y+8	; 0x08
     2fe:	46 0f       	add	r20, r22
     300:	51 1d       	adc	r21, r1
     302:	44 52       	subi	r20, 0x24	; 36
     304:	52 40       	sbci	r21, 0x02	; 2
     306:	5a a3       	std	Y+34, r21	; 0x22
     308:	49 a3       	std	Y+33, r20	; 0x21
			pitch[2] = ((int)(buf[17] - '0')*100 + (int)(buf[18] - '0')*10 + (int)(buf[19] - '0')) - 500;
     30a:	ea 89       	ldd	r30, Y+18	; 0x12
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	f0 97       	sbiw	r30, 0x30	; 48
     310:	7e 9e       	mul	r7, r30
     312:	b0 01       	movw	r22, r0
     314:	7f 9e       	mul	r7, r31
     316:	70 0d       	add	r23, r0
     318:	11 24       	eor	r1, r1
     31a:	eb 89       	ldd	r30, Y+19	; 0x13
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	f0 97       	sbiw	r30, 0x30	; 48
     320:	df 01       	movw	r26, r30
     322:	aa 0f       	add	r26, r26
     324:	bb 1f       	adc	r27, r27
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	ea 0f       	add	r30, r26
     334:	fb 1f       	adc	r31, r27
     336:	6e 0f       	add	r22, r30
     338:	7f 1f       	adc	r23, r31
     33a:	ec 89       	ldd	r30, Y+20	; 0x14
     33c:	6e 0f       	add	r22, r30
     33e:	71 1d       	adc	r23, r1
     340:	64 52       	subi	r22, 0x24	; 36
     342:	72 40       	sbci	r23, 0x02	; 2
     344:	7c a3       	std	Y+36, r23	; 0x24
     346:	6b a3       	std	Y+35, r22	; 0x23
			roll[1] = ((int)(buf[9] - '0')*100 + (int)(buf[10] - '0')*10 + (int)(buf[11] - '0')) - 500;
     348:	ea 85       	ldd	r30, Y+10	; 0x0a
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	f0 97       	sbiw	r30, 0x30	; 48
     34e:	7e 9e       	mul	r7, r30
     350:	80 01       	movw	r16, r0
     352:	7f 9e       	mul	r7, r31
     354:	10 0d       	add	r17, r0
     356:	11 24       	eor	r1, r1
     358:	ab 85       	ldd	r26, Y+11	; 0x0b
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	d0 97       	sbiw	r26, 0x30	; 48
     35e:	fd 01       	movw	r30, r26
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	aa 0f       	add	r26, r26
     366:	bb 1f       	adc	r27, r27
     368:	aa 0f       	add	r26, r26
     36a:	bb 1f       	adc	r27, r27
     36c:	aa 0f       	add	r26, r26
     36e:	bb 1f       	adc	r27, r27
     370:	ae 0f       	add	r26, r30
     372:	bf 1f       	adc	r27, r31
     374:	f8 01       	movw	r30, r16
     376:	ea 0f       	add	r30, r26
     378:	fb 1f       	adc	r31, r27
     37a:	ac 85       	ldd	r26, Y+12	; 0x0c
     37c:	ea 0f       	add	r30, r26
     37e:	f1 1d       	adc	r31, r1
     380:	e4 52       	subi	r30, 0x24	; 36
     382:	f2 40       	sbci	r31, 0x02	; 2
     384:	f8 a7       	std	Y+40, r31	; 0x28
     386:	ef a3       	std	Y+39, r30	; 0x27
			roll[2] = ((int)(buf[21] - '0')*100 + (int)(buf[22] - '0')*10 + (int)(buf[23] - '0')) - 500;			
     388:	ae 89       	ldd	r26, Y+22	; 0x16
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	d0 97       	sbiw	r26, 0x30	; 48
     38e:	7a 9e       	mul	r7, r26
     390:	70 01       	movw	r14, r0
     392:	7b 9e       	mul	r7, r27
     394:	f0 0c       	add	r15, r0
     396:	11 24       	eor	r1, r1
     398:	af 89       	ldd	r26, Y+23	; 0x17
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	d0 97       	sbiw	r26, 0x30	; 48
     39e:	8d 01       	movw	r16, r26
     3a0:	00 0f       	add	r16, r16
     3a2:	11 1f       	adc	r17, r17
     3a4:	aa 0f       	add	r26, r26
     3a6:	bb 1f       	adc	r27, r27
     3a8:	aa 0f       	add	r26, r26
     3aa:	bb 1f       	adc	r27, r27
     3ac:	aa 0f       	add	r26, r26
     3ae:	bb 1f       	adc	r27, r27
     3b0:	a0 0f       	add	r26, r16
     3b2:	b1 1f       	adc	r27, r17
     3b4:	ae 0d       	add	r26, r14
     3b6:	bf 1d       	adc	r27, r15
     3b8:	18 8d       	ldd	r17, Y+24	; 0x18
     3ba:	a1 0f       	add	r26, r17
     3bc:	b1 1d       	adc	r27, r1
     3be:	a4 52       	subi	r26, 0x24	; 36
     3c0:	b2 40       	sbci	r27, 0x02	; 2
     3c2:	ba a7       	std	Y+42, r27	; 0x2a
     3c4:	a9 a7       	std	Y+41, r26	; 0x29
			if(INIT)
     3c6:	00 91 5c 01 	lds	r16, 0x015C	; 0x80015c <__data_end>
     3ca:	10 91 5d 01 	lds	r17, 0x015D	; 0x80015d <__data_end+0x1>
     3ce:	01 2b       	or	r16, r17
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <main+0x2c2>
     3d2:	0b c1       	rjmp	.+534    	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     3d4:	fe 01       	movw	r30, r28
     3d6:	79 96       	adiw	r30, 0x19	; 25
     3d8:	be 01       	movw	r22, r28
     3da:	65 5d       	subi	r22, 0xD5	; 213
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	ae 01       	movw	r20, r28
     3e0:	41 5e       	subi	r20, 0xE1	; 225
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	9e 01       	movw	r18, r28
     3e6:	2f 5c       	subi	r18, 0xCF	; 207
     3e8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ea:	ce 01       	movw	r24, r28
     3ec:	85 96       	adiw	r24, 0x25	; 37
     3ee:	de 01       	movw	r26, r28
     3f0:	d7 96       	adiw	r26, 0x37	; 55
     3f2:	7d 01       	movw	r14, r26
			{
				for(int i = 0; i < 3; i++)
				{
					yaw_init[i] = yaw[i];
     3f4:	01 91       	ld	r16, Z+
     3f6:	11 91       	ld	r17, Z+
     3f8:	db 01       	movw	r26, r22
     3fa:	0d 93       	st	X+, r16
     3fc:	1d 93       	st	X+, r17
     3fe:	bd 01       	movw	r22, r26
					pitch_init[i] = pitch[i];
     400:	da 01       	movw	r26, r20
     402:	0d 91       	ld	r16, X+
     404:	1d 91       	ld	r17, X+
     406:	ad 01       	movw	r20, r26
     408:	d9 01       	movw	r26, r18
     40a:	0d 93       	st	X+, r16
     40c:	1d 93       	st	X+, r17
     40e:	9d 01       	movw	r18, r26
					roll_init[i] = roll[i];					
     410:	dc 01       	movw	r26, r24
     412:	0d 91       	ld	r16, X+
     414:	1d 91       	ld	r17, X+
     416:	cd 01       	movw	r24, r26
     418:	d7 01       	movw	r26, r14
     41a:	0d 93       	st	X+, r16
     41c:	1d 93       	st	X+, r17
     41e:	7d 01       	movw	r14, r26
			pitch[2] = ((int)(buf[17] - '0')*100 + (int)(buf[18] - '0')*10 + (int)(buf[19] - '0')) - 500;
			roll[1] = ((int)(buf[9] - '0')*100 + (int)(buf[10] - '0')*10 + (int)(buf[11] - '0')) - 500;
			roll[2] = ((int)(buf[21] - '0')*100 + (int)(buf[22] - '0')*10 + (int)(buf[23] - '0')) - 500;			
			if(INIT)
			{
				for(int i = 0; i < 3; i++)
     420:	ad ad       	ldd	r26, Y+61	; 0x3d
     422:	be ad       	ldd	r27, Y+62	; 0x3e
     424:	ea 17       	cp	r30, r26
     426:	fb 07       	cpc	r31, r27
     428:	29 f7       	brne	.-54     	; 0x3f4 <main+0x2e2>
				{
					yaw_init[i] = yaw[i];
					pitch_init[i] = pitch[i];
					roll_init[i] = roll[i];					
				}
				INIT = 0;
     42a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__data_end+0x1>
     42e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
				start = 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <start+0x1>
     43a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <start>
     43e:	9e 01       	movw	r18, r28
     440:	27 5e       	subi	r18, 0xE7	; 231
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	be 01       	movw	r22, r28
     446:	63 5d       	subi	r22, 0xD3	; 211
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	de 01       	movw	r26, r28
     44c:	5f 96       	adiw	r26, 0x1f	; 31
     44e:	7e 01       	movw	r14, r28
     450:	e3 e3       	ldi	r30, 0x33	; 51
     452:	ee 0e       	add	r14, r30
     454:	f1 1c       	adc	r15, r1
     456:	fe 01       	movw	r30, r28
     458:	b5 96       	adiw	r30, 0x25	; 37
     45a:	6e 01       	movw	r12, r28
     45c:	89 e3       	ldi	r24, 0x39	; 57
     45e:	c8 0e       	add	r12, r24
     460:	d1 1c       	adc	r13, r1
	INIT = 1;
	_delay_ms(100);
}

int main(void)
{
     462:	42 e0       	ldi	r20, 0x02	; 2
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	5f 01       	movw	r10, r30
			}
			if(start)
			{
				for(int i = 1; i < 3; i++)
				{
					yaw[i] = yaw[i] - yaw_init[i] + 150;
     468:	fb 01       	movw	r30, r22
     46a:	01 91       	ld	r16, Z+
     46c:	11 91       	ld	r17, Z+
     46e:	bf 01       	movw	r22, r30
     470:	f9 01       	movw	r30, r18
     472:	82 81       	ldd	r24, Z+2	; 0x02
     474:	93 81       	ldd	r25, Z+3	; 0x03
     476:	80 1b       	sub	r24, r16
     478:	91 0b       	sbc	r25, r17
     47a:	8a 56       	subi	r24, 0x6A	; 106
     47c:	9f 4f       	sbci	r25, 0xFF	; 255
     47e:	93 83       	std	Z+3, r25	; 0x03
     480:	82 83       	std	Z+2, r24	; 0x02
					pitch[i] = pitch[i] - pitch_init[i] + 150;
     482:	f7 01       	movw	r30, r14
     484:	01 91       	ld	r16, Z+
     486:	11 91       	ld	r17, Z+
     488:	7f 01       	movw	r14, r30
     48a:	12 96       	adiw	r26, 0x02	; 2
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	13 97       	sbiw	r26, 0x03	; 3
     492:	80 1b       	sub	r24, r16
     494:	91 0b       	sbc	r25, r17
     496:	8a 56       	subi	r24, 0x6A	; 106
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	13 96       	adiw	r26, 0x03	; 3
     49c:	9c 93       	st	X, r25
     49e:	8e 93       	st	-X, r24
     4a0:	12 97       	sbiw	r26, 0x02	; 2
					roll[i] = roll[i] - roll_init[i] + 150;
     4a2:	f6 01       	movw	r30, r12
     4a4:	01 91       	ld	r16, Z+
     4a6:	11 91       	ld	r17, Z+
     4a8:	6f 01       	movw	r12, r30
     4aa:	f5 01       	movw	r30, r10
     4ac:	82 81       	ldd	r24, Z+2	; 0x02
     4ae:	93 81       	ldd	r25, Z+3	; 0x03
     4b0:	80 1b       	sub	r24, r16
     4b2:	91 0b       	sbc	r25, r17
     4b4:	8a 56       	subi	r24, 0x6A	; 106
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	93 83       	std	Z+3, r25	; 0x03
     4ba:	82 83       	std	Z+2, r24	; 0x02
     4bc:	41 50       	subi	r20, 0x01	; 1
     4be:	51 09       	sbc	r21, r1
     4c0:	2e 5f       	subi	r18, 0xFE	; 254
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	12 96       	adiw	r26, 0x02	; 2
     4c6:	f2 e0       	ldi	r31, 0x02	; 2
     4c8:	af 0e       	add	r10, r31
     4ca:	b1 1c       	adc	r11, r1
				INIT = 0;
				start = 1;
			}
			if(start)
			{
				for(int i = 1; i < 3; i++)
     4cc:	41 15       	cp	r20, r1
     4ce:	51 05       	cpc	r21, r1
     4d0:	59 f6       	brne	.-106    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				{
					yaw[i] = yaw[i] - yaw_init[i] + 150;
					pitch[i] = pitch[i] - pitch_init[i] + 150;
					roll[i] = roll[i] - roll_init[i] + 150;
				}
				printf("Yaw_1 = %d, Pitch_1 = %d, Roll_1 = %d, Yaw_2 = %d, Pitch_2 = %d, Roll_2 = %d\n", -yaw[1], -pitch[1], roll[1], (300 - yaw[2]), (300 - pitch[2]), roll[2]);				
     4d2:	8b a1       	ldd	r24, Y+35	; 0x23
     4d4:	9c a1       	ldd	r25, Y+36	; 0x24
     4d6:	71 01       	movw	r14, r2
     4d8:	e8 1a       	sub	r14, r24
     4da:	f9 0a       	sbc	r15, r25
     4dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4de:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4e0:	81 01       	movw	r16, r2
     4e2:	08 1b       	sub	r16, r24
     4e4:	19 0b       	sbc	r17, r25
     4e6:	8a a5       	ldd	r24, Y+42	; 0x2a
     4e8:	8f 93       	push	r24
     4ea:	89 a5       	ldd	r24, Y+41	; 0x29
     4ec:	8f 93       	push	r24
     4ee:	ff 92       	push	r15
     4f0:	ef 92       	push	r14
     4f2:	1f 93       	push	r17
     4f4:	0f 93       	push	r16
     4f6:	88 a5       	ldd	r24, Y+40	; 0x28
     4f8:	8f 93       	push	r24
     4fa:	8f a1       	ldd	r24, Y+39	; 0x27
     4fc:	8f 93       	push	r24
     4fe:	89 a1       	ldd	r24, Y+33	; 0x21
     500:	9a a1       	ldd	r25, Y+34	; 0x22
     502:	91 95       	neg	r25
     504:	81 95       	neg	r24
     506:	91 09       	sbc	r25, r1
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     50e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     510:	91 95       	neg	r25
     512:	81 95       	neg	r24
     514:	91 09       	sbc	r25, r1
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	8e e0       	ldi	r24, 0x0E	; 14
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	82 d3       	rcall	.+1796   	; 0xc28 <printf>
			All_Control_TEST(
     524:	1f 92       	push	r1
     526:	5f 92       	push	r5
     528:	1f 92       	push	r1
     52a:	b6 e9       	ldi	r27, 0x96	; 150
     52c:	bf 93       	push	r27
     52e:	1f 92       	push	r1
     530:	4f 92       	push	r4
     532:	1f 92       	push	r1
     534:	6f 92       	push	r6
     536:	1f 92       	push	r1
     538:	6f 92       	push	r6
     53a:	1f 92       	push	r1
     53c:	e5 e0       	ldi	r30, 0x05	; 5
     53e:	ef 93       	push	r30
     540:	1f 92       	push	r1
     542:	5f 92       	push	r5
     544:	1f 92       	push	r1
     546:	bf 93       	push	r27
     548:	1f 92       	push	r1
     54a:	4f 92       	push	r4
     54c:	1f 92       	push	r1
     54e:	6f 92       	push	r6
     550:	1f 92       	push	r1
     552:	6f 92       	push	r6
     554:	1f 92       	push	r1
     556:	f4 e0       	ldi	r31, 0x04	; 4
     558:	ff 93       	push	r31
     55a:	1f 92       	push	r1
     55c:	5f 92       	push	r5
     55e:	1f 92       	push	r1
     560:	bf 93       	push	r27
     562:	1f 92       	push	r1
     564:	4f 92       	push	r4
     566:	1f 92       	push	r1
     568:	6f 92       	push	r6
     56a:	1f 92       	push	r1
     56c:	6f 92       	push	r6
     56e:	1f 92       	push	r1
     570:	23 e0       	ldi	r18, 0x03	; 3
     572:	2f 93       	push	r18
     574:	1f 92       	push	r1
     576:	5f 92       	push	r5
     578:	ff 92       	push	r15
     57a:	ef 92       	push	r14
     57c:	1f 92       	push	r1
     57e:	4f 92       	push	r4
     580:	88 24       	eor	r8, r8
     582:	83 94       	inc	r8
     584:	91 2c       	mov	r9, r1
     586:	aa 24       	eor	r10, r10
     588:	a3 94       	inc	r10
     58a:	b1 2c       	mov	r11, r1
     58c:	68 94       	set
     58e:	cc 24       	eor	r12, r12
     590:	c1 f8       	bld	r12, 1
     592:	d1 2c       	mov	r13, r1
     594:	0f 2e       	mov	r0, r31
     596:	f2 e3       	ldi	r31, 0x32	; 50
     598:	ef 2e       	mov	r14, r31
     59a:	f1 2c       	mov	r15, r1
     59c:	f0 2d       	mov	r31, r0
     59e:	20 e2       	ldi	r18, 0x20	; 32
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	41 e0       	ldi	r20, 0x01	; 1
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	3a d0       	rcall	.+116    	; 0x624 <All_Control_TEST>
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	3d ce       	rjmp	.-902    	; 0x236 <main+0x124>
			0x05, ON, 1, 32,	150,	50);				
			}
			else
			{
				//값 확인용
				printf("Yaw_1 = %d, Pitch_1 = %d, Roll_1 = %d, Yaw_2 = %d, Pitch_2 = %d, Roll_2 = %d\n", yaw[1], pitch[1], roll[1], yaw[2], pitch[2], roll[2]);				
     5bc:	bf 93       	push	r27
     5be:	af 93       	push	r26
     5c0:	7f 93       	push	r23
     5c2:	6f 93       	push	r22
     5c4:	3f 93       	push	r19
     5c6:	2f 93       	push	r18
     5c8:	ff 93       	push	r31
     5ca:	ef 93       	push	r30
     5cc:	5f 93       	push	r21
     5ce:	4f 93       	push	r20
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	ae e0       	ldi	r26, 0x0E	; 14
     5d6:	b1 e0       	ldi	r27, 0x01	; 1
     5d8:	bf 93       	push	r27
     5da:	af 93       	push	r26
     5dc:	25 d3       	rcall	.+1610   	; 0xc28 <printf>
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	26 ce       	rjmp	.-948    	; 0x236 <main+0x124>
					roll_init[i] = roll[i];					
				}
				INIT = 0;
				start = 1;
			}
			if(start)
     5ea:	00 91 5e 01 	lds	r16, 0x015E	; 0x80015e <start>
     5ee:	10 91 5f 01 	lds	r17, 0x015F	; 0x80015f <start+0x1>
     5f2:	01 2b       	or	r16, r17
     5f4:	19 f3       	breq	.-58     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5f6:	23 cf       	rjmp	.-442    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

000005f8 <uart_mx_init>:
void borate_set(unsigned int borate)		// 0x01 == 1M , 0x03 == 500000 , 0x04 == 400000 , 0x07 == 250000 , 0x09 == 200000  보레이트 변경하는 함수
{
	gbpParameter[0] = 0x04;		//Baud Rate Address
	gbpParameter[1] = borate; // 1M
	
	TxPacket_mx (0xFE,0x03,2); //모터 전체 , 0X03명령 , 길이
     5f8:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     5fc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     606:	88 e1       	ldi	r24, 0x18	; 24
     608:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     60c:	86 e0       	ldi	r24, 0x06	; 6
     60e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     612:	08 95       	ret

00000614 <uart_mx_transmit>:
     614:	eb e9       	ldi	r30, 0x9B	; 155
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	90 81       	ld	r25, Z
     61a:	95 ff       	sbrs	r25, 5
     61c:	fd cf       	rjmp	.-6      	; 0x618 <uart_mx_transmit+0x4>
     61e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     622:	08 95       	ret

00000624 <All_Control_TEST>:
void All_Control_TEST(	unsigned int ID_number_1, int chose_1, unsigned int flexible_val_1,unsigned int flexible_1, unsigned int p_number_1, unsigned int AX_Speed_1,
unsigned int ID_number_2, int chose_2, unsigned int flexible_val_2,unsigned int flexible_2, unsigned int p_number_2, unsigned int AX_Speed_2,
unsigned int ID_number_3, int chose_3, unsigned int flexible_val_3,unsigned int flexible_3, unsigned int p_number_3, unsigned int AX_Speed_3,
unsigned int ID_number_4, int chose_4, unsigned int flexible_val_4,unsigned int flexible_4, unsigned int p_number_4, unsigned int AX_Speed_4,
unsigned int ID_number_5, int chose_5, unsigned int flexible_val_5,unsigned int flexible_5, unsigned int p_number_5, unsigned int AX_Speed_5)
{
     624:	2f 92       	push	r2
     626:	3f 92       	push	r3
     628:	4f 92       	push	r4
     62a:	5f 92       	push	r5
     62c:	6f 92       	push	r6
     62e:	7f 92       	push	r7
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <All_Control_TEST+0x26>
     64a:	1f 92       	push	r1
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	c4 2e       	mov	r12, r20
     652:	d2 2e       	mov	r13, r18
     654:	b8 01       	movw	r22, r16
     656:	18 8d       	ldd	r17, Y+24	; 0x18
     658:	6a 8c       	ldd	r6, Y+26	; 0x1a
     65a:	7b 8c       	ldd	r7, Y+27	; 0x1b
     65c:	4e a4       	ldd	r4, Y+46	; 0x2e
     65e:	38 a8       	ldd	r3, Y+48	; 0x30
     660:	8a ad       	ldd	r24, Y+58	; 0x3a
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	0c ad       	ldd	r16, Y+60	; 0x3c
	unsigned int position_1 = 3.41*p_number_1;			//Change 0~300 to 0~1023
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	cb d1       	rcall	.+918    	; 0xa02 <__floatunsisf>
     66c:	21 e7       	ldi	r18, 0x71	; 113
     66e:	3d e3       	ldi	r19, 0x3D	; 61
     670:	4a e5       	ldi	r20, 0x5A	; 90
     672:	50 e4       	ldi	r21, 0x40	; 64
     674:	2c d2       	rcall	.+1112   	; 0xace <__mulsf3>
     676:	99 d1       	rcall	.+818    	; 0x9aa <__fixunssfsi>
     678:	b6 2e       	mov	r11, r22
     67a:	7a 83       	std	Y+2, r23	; 0x02

	unsigned int position_2 = 3.41*p_number_2;			//Change 0~300 to 0~1023
     67c:	b3 01       	movw	r22, r6
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	bf d1       	rcall	.+894    	; 0xa02 <__floatunsisf>
     684:	21 e7       	ldi	r18, 0x71	; 113
     686:	3d e3       	ldi	r19, 0x3D	; 61
     688:	4a e5       	ldi	r20, 0x5A	; 90
     68a:	50 e4       	ldi	r21, 0x40	; 64
     68c:	20 d2       	rcall	.+1088   	; 0xace <__mulsf3>
     68e:	8d d1       	rcall	.+794    	; 0x9aa <__fixunssfsi>
     690:	6b 83       	std	Y+3, r22	; 0x03
     692:	a7 2e       	mov	r10, r23
	unsigned int position_2a = 3.41*(300-p_number_2);	//Change 0~300 to 0~1023
     694:	6c e2       	ldi	r22, 0x2C	; 44
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	66 19       	sub	r22, r6
     69a:	77 09       	sbc	r23, r7
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	b0 d1       	rcall	.+864    	; 0xa02 <__floatunsisf>
     6a2:	21 e7       	ldi	r18, 0x71	; 113
     6a4:	3d e3       	ldi	r19, 0x3D	; 61
     6a6:	4a e5       	ldi	r20, 0x5A	; 90
     6a8:	50 e4       	ldi	r21, 0x40	; 64
     6aa:	11 d2       	rcall	.+1058   	; 0xace <__mulsf3>
     6ac:	7e d1       	rcall	.+764    	; 0x9aa <__fixunssfsi>
     6ae:	76 2e       	mov	r7, r22

	unsigned int position_3 = 3.41*p_number_3;			//Change 0~300 to 0~1023
	unsigned int position_4 = 3.41*p_number_4;			//Change 0~300 to 0~1023
     6b0:	67 2e       	mov	r6, r23
     6b2:	6a a9       	ldd	r22, Y+50	; 0x32
     6b4:	7b a9       	ldd	r23, Y+51	; 0x33
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	a3 d1       	rcall	.+838    	; 0xa02 <__floatunsisf>
     6bc:	21 e7       	ldi	r18, 0x71	; 113
     6be:	3d e3       	ldi	r19, 0x3D	; 61
     6c0:	4a e5       	ldi	r20, 0x5A	; 90
     6c2:	50 e4       	ldi	r21, 0x40	; 64
     6c4:	04 d2       	rcall	.+1032   	; 0xace <__mulsf3>
     6c6:	71 d1       	rcall	.+738    	; 0x9aa <__fixunssfsi>
     6c8:	96 2e       	mov	r9, r22
	unsigned int position_5 = 3.41*p_number_5;			//Change 0~300 to 0~1023
     6ca:	57 2e       	mov	r5, r23
     6cc:	6e ad       	ldd	r22, Y+62	; 0x3e
     6ce:	7f ad       	ldd	r23, Y+63	; 0x3f
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	96 d1       	rcall	.+812    	; 0xa02 <__floatunsisf>
     6d6:	21 e7       	ldi	r18, 0x71	; 113
     6d8:	3d e3       	ldi	r19, 0x3D	; 61
     6da:	4a e5       	ldi	r20, 0x5A	; 90
     6dc:	50 e4       	ldi	r21, 0x40	; 64
     6de:	f7 d1       	rcall	.+1006   	; 0xace <__mulsf3>
     6e0:	64 d1       	rcall	.+712    	; 0x9aa <__fixunssfsi>
     6e2:	22 96       	adiw	r28, 0x02	; 2
     6e4:	2e ad       	ldd	r18, Y+62	; 0x3e

	unsigned int AX_Speed_5_c = 9*AX_Speed_5;
     6e6:	3f ad       	ldd	r19, Y+63	; 0x3f
     6e8:	22 97       	sbiw	r28, 0x02	; 2
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	22 96       	adiw	r28, 0x02	; 2
     6f8:	ee ad       	ldd	r30, Y+62	; 0x3e
     6fa:	ff ad       	ldd	r31, Y+63	; 0x3f
     6fc:	22 97       	sbiw	r28, 0x02	; 2
     6fe:	2e 0f       	add	r18, r30
     700:	3f 1f       	adc	r19, r31
     702:	4c a9       	ldd	r20, Y+52	; 0x34
     704:	5d a9       	ldd	r21, Y+53	; 0x35
	unsigned int AX_Speed_4_c = 9*AX_Speed_4;
     706:	44 0f       	add	r20, r20
     708:	55 1f       	adc	r21, r21
     70a:	44 0f       	add	r20, r20
     70c:	55 1f       	adc	r21, r21
     70e:	44 0f       	add	r20, r20
     710:	55 1f       	adc	r21, r21
     712:	8c a9       	ldd	r24, Y+52	; 0x34
     714:	9d a9       	ldd	r25, Y+53	; 0x35
     716:	48 0f       	add	r20, r24
     718:	59 1f       	adc	r21, r25
     71a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     71c:	9d 8d       	ldd	r25, Y+29	; 0x1d
	unsigned int AX_Speed_3_c = 9*AX_Speed_3;
	unsigned int AX_Speed_2_c = 9*AX_Speed_2;
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	ec 8d       	ldd	r30, Y+28	; 0x1c
     72c:	fd 8d       	ldd	r31, Y+29	; 0x1d
     72e:	8e 0f       	add	r24, r30
     730:	9f 1f       	adc	r25, r31
     732:	d7 01       	movw	r26, r14
     734:	aa 0f       	add	r26, r26
	unsigned int AX_Speed_1_c = 9*AX_Speed_1;
     736:	bb 1f       	adc	r27, r27
     738:	aa 0f       	add	r26, r26
     73a:	bb 1f       	adc	r27, r27
     73c:	aa 0f       	add	r26, r26
     73e:	bb 1f       	adc	r27, r27
     740:	ae 0d       	add	r26, r14
     742:	bf 1d       	adc	r27, r15
     744:	e1 ee       	ldi	r30, 0xE1	; 225
     746:	f1 e0       	ldi	r31, 0x01	; 1
	
	int CheckSum_Value= 0;
	byte bCount,bCheckSum,bPacketLength;

	gbpTxBuffer[0] = 0xFF;
     748:	22 24       	eor	r2, r2
     74a:	2a 94       	dec	r2
     74c:	20 82       	st	Z, r2
     74e:	21 82       	std	Z+1, r2	; 0x01
     750:	0f 2e       	mov	r0, r31
	gbpTxBuffer[1] = 0xFF;	//시작
     752:	fe ef       	ldi	r31, 0xFE	; 254
	gbpTxBuffer[2] = 0xFE;	//ID
     754:	2f 2e       	mov	r2, r31
     756:	f0 2d       	mov	r31, r0
     758:	22 82       	std	Z+2, r2	; 0x02
     75a:	0f 2e       	mov	r0, r31
     75c:	f1 e3       	ldi	r31, 0x31	; 49

	gbpTxBuffer[3] = ((8 + 1)*5) + 4;	//길이 (L:Dynamixel별 Data Length, N:Dynamixel의 개수)
     75e:	2f 2e       	mov	r2, r31
     760:	f0 2d       	mov	r31, r0
     762:	23 82       	std	Z+3, r2	; 0x03
     764:	0f 2e       	mov	r0, r31
     766:	f3 e8       	ldi	r31, 0x83	; 131

	gbpTxBuffer[4] = 0x83;	//명령
     768:	2f 2e       	mov	r2, r31
     76a:	f0 2d       	mov	r31, r0
     76c:	24 82       	std	Z+4, r2	; 0x04
     76e:	0f 2e       	mov	r0, r31
     770:	fa e1       	ldi	r31, 0x1A	; 26

	gbpTxBuffer[5] =0x1a;
     772:	2f 2e       	mov	r2, r31
     774:	f0 2d       	mov	r31, r0
     776:	25 82       	std	Z+5, r2	; 0x05
     778:	68 94       	set
     77a:	22 24       	eor	r2, r2
	gbpTxBuffer[6] =0x08;
     77c:	23 f8       	bld	r2, 3
     77e:	26 82       	std	Z+6, r2	; 0x06
     780:	22 24       	eor	r2, r2
     782:	23 94       	inc	r2

	gbpTxBuffer[7] = 0x01;				//ID
     784:	27 82       	std	Z+7, r2	; 0x07
     786:	c0 86       	std	Z+8, r12	; 0x08
     788:	c1 86       	std	Z+9, r12	; 0x09
	gbpTxBuffer[8] = flexible_val_1;	//유격 오차
     78a:	d2 86       	std	Z+10, r13	; 0x0a
	gbpTxBuffer[9] = flexible_val_1;	//유격 오차
     78c:	d3 86       	std	Z+11, r13	; 0x0b
	gbpTxBuffer[10] = flexible_1;		//유연성
     78e:	b4 86       	std	Z+12, r11	; 0x0c
	gbpTxBuffer[11] = flexible_1;		//유연성
     790:	fa 80       	ldd	r15, Y+2	; 0x02
	gbpTxBuffer[12] = (unsigned char)(position_1); //Writing Data  , goal position(L)
     792:	f5 86       	std	Z+13, r15	; 0x0d
	gbpTxBuffer[13] = (unsigned char)(position_1>>8); //goal position(H)
     794:	a6 87       	std	Z+14, r26	; 0x0e
     796:	b7 87       	std	Z+15, r27	; 0x0f
	gbpTxBuffer[14] = (unsigned char)AX_Speed_1_c; //goal Speed(L)
     798:	a2 e0       	ldi	r26, 0x02	; 2
	gbpTxBuffer[15] = (unsigned char)(AX_Speed_1_c >> 8); //goal Speed(H)
     79a:	a0 8b       	std	Z+16, r26	; 0x10

	gbpTxBuffer[16] = 0x02;				//ID
     79c:	81 8a       	std	Z+17, r8	; 0x11
     79e:	82 8a       	std	Z+18, r8	; 0x12
	gbpTxBuffer[17] = flexible_val_2;	//유격 오차
     7a0:	13 8b       	std	Z+19, r17	; 0x13
	gbpTxBuffer[18] = flexible_val_2;	//유격 오차
     7a2:	14 8b       	std	Z+20, r17	; 0x14
	gbpTxBuffer[19] = flexible_2;		//유연성
     7a4:	fb 80       	ldd	r15, Y+3	; 0x03
	gbpTxBuffer[20] = flexible_2;		//유연성
     7a6:	f5 8a       	std	Z+21, r15	; 0x15
	gbpTxBuffer[21] = (unsigned char)(position_2); //Writing Data  , goal position(L)
     7a8:	a6 8a       	std	Z+22, r10	; 0x16
     7aa:	87 8b       	std	Z+23, r24	; 0x17
	gbpTxBuffer[22] = (unsigned char)(position_2>>8); //goal position(H)
     7ac:	90 8f       	std	Z+24, r25	; 0x18
	gbpTxBuffer[23] = (unsigned char)AX_Speed_2_c; //goal Speed(L)
     7ae:	a3 e0       	ldi	r26, 0x03	; 3
	gbpTxBuffer[24] = (unsigned char)(AX_Speed_2_c >> 8); //goal Speed(H)
     7b0:	a1 8f       	std	Z+25, r26	; 0x19

	gbpTxBuffer[25] = 0x03;				//ID
     7b2:	82 8e       	std	Z+26, r8	; 0x1a
     7b4:	83 8e       	std	Z+27, r8	; 0x1b
	gbpTxBuffer[26] = flexible_val_2;	//유격 오차
     7b6:	14 8f       	std	Z+28, r17	; 0x1c
	gbpTxBuffer[27] = flexible_val_2;	//유격 오차
     7b8:	15 8f       	std	Z+29, r17	; 0x1d
	gbpTxBuffer[28] = flexible_2;		//유연성
     7ba:	76 8e       	std	Z+30, r7	; 0x1e
	gbpTxBuffer[29] = flexible_2;		//유연성
     7bc:	67 8e       	std	Z+31, r6	; 0x1f
	gbpTxBuffer[30] = (unsigned char)(position_2a); //Writing Data  , goal position(L)
     7be:	80 a3       	std	Z+32, r24	; 0x20
	gbpTxBuffer[31] = (unsigned char)(position_2a>>8); //goal position(H)
     7c0:	91 a3       	std	Z+33, r25	; 0x21
	gbpTxBuffer[32] = (unsigned char)AX_Speed_2_c; //goal Speed(L)
     7c2:	84 e0       	ldi	r24, 0x04	; 4
	gbpTxBuffer[33] = (unsigned char)(AX_Speed_2_c >> 8); //goal Speed(H)
     7c4:	82 a3       	std	Z+34, r24	; 0x22
	
	gbpTxBuffer[34] = 0x04;				//ID
     7c6:	43 a2       	std	Z+35, r4	; 0x23
     7c8:	44 a2       	std	Z+36, r4	; 0x24
	gbpTxBuffer[35] = flexible_val_4;	//유격 오차
     7ca:	35 a2       	std	Z+37, r3	; 0x25
	gbpTxBuffer[36] = flexible_val_4;	//유격 오차
     7cc:	36 a2       	std	Z+38, r3	; 0x26
	gbpTxBuffer[37] = flexible_4;		//유연성
     7ce:	97 a2       	std	Z+39, r9	; 0x27
	gbpTxBuffer[38] = flexible_4;		//유연성
     7d0:	50 a6       	std	Z+40, r5	; 0x28
	gbpTxBuffer[39] = (unsigned char)(position_4); //Writing Data  , goal position(L)
     7d2:	41 a7       	std	Z+41, r20	; 0x29
	gbpTxBuffer[40] = (unsigned char)(position_4>>8); //goal position(H)
     7d4:	52 a7       	std	Z+42, r21	; 0x2a
	gbpTxBuffer[41] = (unsigned char)AX_Speed_4_c; //goal Speed(L)
     7d6:	85 e0       	ldi	r24, 0x05	; 5
	gbpTxBuffer[42] = (unsigned char)(AX_Speed_4_c >> 8); //goal Speed(H)
     7d8:	83 a7       	std	Z+43, r24	; 0x2b
	
	gbpTxBuffer[43] = 0x05;				//ID
     7da:	f9 80       	ldd	r15, Y+1	; 0x01
     7dc:	f4 a6       	std	Z+44, r15	; 0x2c
	gbpTxBuffer[44] = flexible_val_5;	//유격 오차
     7de:	f5 a6       	std	Z+45, r15	; 0x2d
     7e0:	06 a7       	std	Z+46, r16	; 0x2e
	gbpTxBuffer[45] = flexible_val_5;	//유격 오차
     7e2:	07 a7       	std	Z+47, r16	; 0x2f
	gbpTxBuffer[46] = flexible_5;		//유연성
     7e4:	60 ab       	std	Z+48, r22	; 0x30
	gbpTxBuffer[47] = flexible_5;		//유연성
     7e6:	71 ab       	std	Z+49, r23	; 0x31
	gbpTxBuffer[48] = (unsigned char)(position_5); //Writing Data  , goal position(L)
     7e8:	22 ab       	std	Z+50, r18	; 0x32
	gbpTxBuffer[49] = (unsigned char)(position_5>>8); //goal position(H)
     7ea:	33 ab       	std	Z+51, r19	; 0x33
	gbpTxBuffer[50] = (unsigned char)AX_Speed_5_c; //goal Speed(L)
     7ec:	e3 ee       	ldi	r30, 0xE3	; 227
	gbpTxBuffer[51] = (unsigned char)(AX_Speed_5_c >> 8); //goal Speed(H)
     7ee:	f1 e0       	ldi	r31, 0x01	; 1
     7f0:	45 e1       	ldi	r20, 0x15	; 21
     7f2:	52 e0       	ldi	r21, 0x02	; 2
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
	unsigned int AX_Speed_4_c = 9*AX_Speed_4;
	unsigned int AX_Speed_3_c = 9*AX_Speed_3;
	unsigned int AX_Speed_2_c = 9*AX_Speed_2;
	unsigned int AX_Speed_1_c = 9*AX_Speed_1;
	
	int CheckSum_Value= 0;
     7f8:	21 91       	ld	r18, Z+
     7fa:	82 0f       	add	r24, r18
	gbpTxBuffer[50] = (unsigned char)AX_Speed_5_c; //goal Speed(L)
	gbpTxBuffer[51] = (unsigned char)(AX_Speed_5_c >> 8); //goal Speed(H)

	for(int i=2; i<=51; i++)
	{
		CheckSum_Value+= gbpTxBuffer[i];
     7fc:	91 1d       	adc	r25, r1
     7fe:	e4 17       	cp	r30, r20
     800:	f5 07       	cpc	r31, r21
	gbpTxBuffer[48] = (unsigned char)(position_5); //Writing Data  , goal position(L)
	gbpTxBuffer[49] = (unsigned char)(position_5>>8); //goal position(H)
	gbpTxBuffer[50] = (unsigned char)AX_Speed_5_c; //goal Speed(L)
	gbpTxBuffer[51] = (unsigned char)(AX_Speed_5_c >> 8); //goal Speed(H)

	for(int i=2; i<=51; i++)
     802:	d1 f7       	brne	.-12     	; 0x7f8 <All_Control_TEST+0x1d4>
     804:	80 95       	com	r24
     806:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <gbpTxBuffer+0x34>
	{
		CheckSum_Value+= gbpTxBuffer[i];
	}
	gbpTxBuffer[52] = ~(CheckSum_Value);	//Check Sum
     80a:	94 9a       	sbi	0x12, 4	; 18
     80c:	8f e9       	ldi	r24, 0x9F	; 159
	
	RS485_TXD
     80e:	9f e0       	ldi	r25, 0x0F	; 15
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <All_Control_TEST+0x1ec>
     814:	00 c0       	rjmp	.+0      	; 0x816 <All_Control_TEST+0x1f2>
     816:	00 00       	nop
     818:	01 ee       	ldi	r16, 0xE1	; 225
     81a:	11 e0       	ldi	r17, 0x01	; 1
     81c:	0f 2e       	mov	r0, r31
     81e:	f6 e1       	ldi	r31, 0x16	; 22
     820:	cf 2e       	mov	r12, r31
     822:	f2 e0       	ldi	r31, 0x02	; 2
     824:	df 2e       	mov	r13, r31
     826:	f0 2d       	mov	r31, r0
     828:	0f 2e       	mov	r0, r31
	_delay_ms(1);	
	bPacketLength= 0x35;
	for(bCount=0;bCount<bPacketLength;bCount++)	//uart통신 Packet 전송
	{
		sbi(UCSR1A,6);
     82a:	fb e9       	ldi	r31, 0x9B	; 155
     82c:	ef 2e       	mov	r14, r31
     82e:	f1 2c       	mov	r15, r1
     830:	f0 2d       	mov	r31, r0
     832:	f7 01       	movw	r30, r14
     834:	80 81       	ld	r24, Z
     836:	80 64       	ori	r24, 0x40	; 64
     838:	80 83       	st	Z, r24
     83a:	f8 01       	movw	r30, r16
		uart_mx_transmit(gbpTxBuffer[bCount]);
     83c:	81 91       	ld	r24, Z+
     83e:	8f 01       	movw	r16, r30
     840:	e9 de       	rcall	.-558    	; 0x614 <uart_mx_transmit>
     842:	0c 15       	cp	r16, r12
     844:	1d 05       	cpc	r17, r13
	gbpTxBuffer[52] = ~(CheckSum_Value);	//Check Sum
	
	RS485_TXD
	_delay_ms(1);	
	bPacketLength= 0x35;
	for(bCount=0;bCount<bPacketLength;bCount++)	//uart통신 Packet 전송
     846:	a9 f7       	brne	.-22     	; 0x832 <All_Control_TEST+0x20e>
     848:	eb e9       	ldi	r30, 0x9B	; 155
     84a:	f0 e0       	ldi	r31, 0x00	; 0
	{
		sbi(UCSR1A,6);
		uart_mx_transmit(gbpTxBuffer[bCount]);
	}
	while(!CHECK_TXD1_FINISH);		//전송이 끝날때 까지 대기
     84c:	80 81       	ld	r24, Z
     84e:	86 ff       	sbrs	r24, 6
     850:	fd cf       	rjmp	.-6      	; 0x84c <All_Control_TEST+0x228>
     852:	94 98       	cbi	0x12, 4	; 18
     854:	8f e9       	ldi	r24, 0x9F	; 159
	RS485_RXD
     856:	9f e0       	ldi	r25, 0x0F	; 15
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <All_Control_TEST+0x234>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <All_Control_TEST+0x23a>
     85e:	00 00       	nop
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
	_delay_ms(1);
	return(bPacketLength);		//Packet길이 반환
     864:	0f 90       	pop	r0
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	9f 90       	pop	r9
     87c:	8f 90       	pop	r8
     87e:	7f 90       	pop	r7
     880:	6f 90       	pop	r6
     882:	5f 90       	pop	r5
     884:	4f 90       	pop	r4
     886:	3f 90       	pop	r3
     888:	2f 90       	pop	r2
     88a:	08 95       	ret

0000088c <UART_putchar>:
     88c:	cf 93       	push	r28
     88e:	c8 2f       	mov	r28, r24
		{
			UART0_putchar(c[i]);
			i++;
		}
	}
}
     890:	8a 30       	cpi	r24, 0x0A	; 10
     892:	11 f4       	brne	.+4      	; 0x898 <UART_putchar+0xc>
     894:	8d e0       	ldi	r24, 0x0D	; 13
     896:	fa df       	rcall	.-12     	; 0x88c <UART_putchar>
     898:	5d 9b       	sbis	0x0b, 5	; 11
     89a:	fe cf       	rjmp	.-4      	; 0x898 <UART_putchar+0xc>
     89c:	cc b9       	out	0x0c, r28	; 12
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <__vector_18>:
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	8f 93       	push	r24
     8ae:	8c b1       	in	r24, 0x0c	; 12
     8b0:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <uart0_rx_data>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <uart0_rx_flag>
     8ba:	8f 91       	pop	r24
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <UART0_init>:
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	aa 1f       	adc	r26, r26
     8d8:	bb 1f       	adc	r27, r27
     8da:	9c 01       	movw	r18, r24
     8dc:	ad 01       	movw	r20, r26
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	44 1f       	adc	r20, r20
     8e4:	55 1f       	adc	r21, r21
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	74 e2       	ldi	r23, 0x24	; 36
     8ea:	84 ef       	ldi	r24, 0xF4	; 244
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	7a d1       	rcall	.+756    	; 0xbe4 <__udivmodsi4>
     8f0:	21 50       	subi	r18, 0x01	; 1
     8f2:	31 09       	sbc	r19, r1
     8f4:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     8f8:	29 b9       	out	0x09, r18	; 9
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	8b b9       	out	0x0b, r24	; 11
     8fe:	88 e9       	ldi	r24, 0x98	; 152
     900:	8a b9       	out	0x0a, r24	; 10
     902:	86 e0       	ldi	r24, 0x06	; 6
     904:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__iob+0x3>
     910:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__iob+0x2>
     914:	08 95       	ret

00000916 <UART0_getchar>:

int UART0_getchar(char *c)
{
     916:	fc 01       	movw	r30, r24
	if (uart0_rx_flag == 0)
     918:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <uart0_rx_flag>
     91c:	99 23       	and	r25, r25
     91e:	41 f0       	breq	.+16     	; 0x930 <UART0_getchar+0x1a>
	{
		return 0;
	}
	else
	{
		*c = uart0_rx_data;
     920:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <uart0_rx_data>
     924:	80 83       	st	Z, r24
		uart0_rx_flag = 0;
     926:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <uart0_rx_flag>
		return 1;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	08 95       	ret

int UART0_getchar(char *c)
{
	if (uart0_rx_flag == 0)
	{
		return 0;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
	{
		*c = uart0_rx_data;
		uart0_rx_flag = 0;
		return 1;
	}
}
     934:	08 95       	ret

00000936 <UART0_gets>:
		return 0;
	}
}
*/
int UART0_gets(char *s, int n)
{
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	8c 01       	movw	r16, r24
     940:	ec 01       	movw	r28, r24
	char *c;
	int i = 0;
	while(1)
	{
		if(UART0_getchar(c))
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	e7 df       	rcall	.-50     	; 0x916 <UART0_getchar>
     948:	89 2b       	or	r24, r25
     94a:	d9 f3       	breq	.-10     	; 0x942 <UART0_gets+0xc>
		{
			s[i] = *c;
     94c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
     950:	89 93       	st	Y+, r24
			if(s[i] == '\n')
     952:	8a 30       	cpi	r24, 0x0A	; 10
     954:	b1 f7       	brne	.-20     	; 0x942 <UART0_gets+0xc>
			{
				if(s[0] == 's' && s[4] == ',' && s[8] == ',' && s[12] == ',' && s[16] == ',' && s[20] == ',')
     956:	f8 01       	movw	r30, r16
     958:	80 81       	ld	r24, Z
     95a:	83 37       	cpi	r24, 0x73	; 115
     95c:	99 f4       	brne	.+38     	; 0x984 <UART0_gets+0x4e>
     95e:	84 81       	ldd	r24, Z+4	; 0x04
     960:	8c 32       	cpi	r24, 0x2C	; 44
     962:	99 f4       	brne	.+38     	; 0x98a <UART0_gets+0x54>
     964:	80 85       	ldd	r24, Z+8	; 0x08
     966:	8c 32       	cpi	r24, 0x2C	; 44
     968:	99 f4       	brne	.+38     	; 0x990 <UART0_gets+0x5a>
     96a:	84 85       	ldd	r24, Z+12	; 0x0c
     96c:	8c 32       	cpi	r24, 0x2C	; 44
     96e:	99 f4       	brne	.+38     	; 0x996 <UART0_gets+0x60>
     970:	80 89       	ldd	r24, Z+16	; 0x10
     972:	8c 32       	cpi	r24, 0x2C	; 44
     974:	99 f4       	brne	.+38     	; 0x99c <UART0_gets+0x66>
				{
					return 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	24 89       	ldd	r18, Z+20	; 0x14
     97c:	2c 32       	cpi	r18, 0x2C	; 44
     97e:	81 f0       	breq	.+32     	; 0x9a0 <UART0_gets+0x6a>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e c0       	rjmp	.+28     	; 0x9a0 <UART0_gets+0x6a>
				}
				else
				{
					return 0;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0b c0       	rjmp	.+22     	; 0x9a0 <UART0_gets+0x6a>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	08 c0       	rjmp	.+16     	; 0x9a0 <UART0_gets+0x6a>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <UART0_gets+0x6a>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <UART0_gets+0x6a>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			i++;			
		}
	}
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	08 95       	ret

000009aa <__fixunssfsi>:
     9aa:	70 d0       	rcall	.+224    	; 0xa8c <__fp_splitA>
     9ac:	88 f0       	brcs	.+34     	; 0x9d0 <__fixunssfsi+0x26>
     9ae:	9f 57       	subi	r25, 0x7F	; 127
     9b0:	90 f0       	brcs	.+36     	; 0x9d6 <__fixunssfsi+0x2c>
     9b2:	b9 2f       	mov	r27, r25
     9b4:	99 27       	eor	r25, r25
     9b6:	b7 51       	subi	r27, 0x17	; 23
     9b8:	a0 f0       	brcs	.+40     	; 0x9e2 <__fixunssfsi+0x38>
     9ba:	d1 f0       	breq	.+52     	; 0x9f0 <__fixunssfsi+0x46>
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	88 1f       	adc	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	1a f0       	brmi	.+6      	; 0x9cc <__fixunssfsi+0x22>
     9c6:	ba 95       	dec	r27
     9c8:	c9 f7       	brne	.-14     	; 0x9bc <__fixunssfsi+0x12>
     9ca:	12 c0       	rjmp	.+36     	; 0x9f0 <__fixunssfsi+0x46>
     9cc:	b1 30       	cpi	r27, 0x01	; 1
     9ce:	81 f0       	breq	.+32     	; 0x9f0 <__fixunssfsi+0x46>
     9d0:	77 d0       	rcall	.+238    	; 0xac0 <__fp_zero>
     9d2:	b1 e0       	ldi	r27, 0x01	; 1
     9d4:	08 95       	ret
     9d6:	74 c0       	rjmp	.+232    	; 0xac0 <__fp_zero>
     9d8:	67 2f       	mov	r22, r23
     9da:	78 2f       	mov	r23, r24
     9dc:	88 27       	eor	r24, r24
     9de:	b8 5f       	subi	r27, 0xF8	; 248
     9e0:	39 f0       	breq	.+14     	; 0x9f0 <__fixunssfsi+0x46>
     9e2:	b9 3f       	cpi	r27, 0xF9	; 249
     9e4:	cc f3       	brlt	.-14     	; 0x9d8 <__fixunssfsi+0x2e>
     9e6:	86 95       	lsr	r24
     9e8:	77 95       	ror	r23
     9ea:	67 95       	ror	r22
     9ec:	b3 95       	inc	r27
     9ee:	d9 f7       	brne	.-10     	; 0x9e6 <__fixunssfsi+0x3c>
     9f0:	3e f4       	brtc	.+14     	; 0xa00 <__fixunssfsi+0x56>
     9f2:	90 95       	com	r25
     9f4:	80 95       	com	r24
     9f6:	70 95       	com	r23
     9f8:	61 95       	neg	r22
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	8f 4f       	sbci	r24, 0xFF	; 255
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
     a00:	08 95       	ret

00000a02 <__floatunsisf>:
     a02:	e8 94       	clt
     a04:	09 c0       	rjmp	.+18     	; 0xa18 <__floatsisf+0x12>

00000a06 <__floatsisf>:
     a06:	97 fb       	bst	r25, 7
     a08:	3e f4       	brtc	.+14     	; 0xa18 <__floatsisf+0x12>
     a0a:	90 95       	com	r25
     a0c:	80 95       	com	r24
     a0e:	70 95       	com	r23
     a10:	61 95       	neg	r22
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	8f 4f       	sbci	r24, 0xFF	; 255
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	99 23       	and	r25, r25
     a1a:	a9 f0       	breq	.+42     	; 0xa46 <__floatsisf+0x40>
     a1c:	f9 2f       	mov	r31, r25
     a1e:	96 e9       	ldi	r25, 0x96	; 150
     a20:	bb 27       	eor	r27, r27
     a22:	93 95       	inc	r25
     a24:	f6 95       	lsr	r31
     a26:	87 95       	ror	r24
     a28:	77 95       	ror	r23
     a2a:	67 95       	ror	r22
     a2c:	b7 95       	ror	r27
     a2e:	f1 11       	cpse	r31, r1
     a30:	f8 cf       	rjmp	.-16     	; 0xa22 <__floatsisf+0x1c>
     a32:	fa f4       	brpl	.+62     	; 0xa72 <__floatsisf+0x6c>
     a34:	bb 0f       	add	r27, r27
     a36:	11 f4       	brne	.+4      	; 0xa3c <__floatsisf+0x36>
     a38:	60 ff       	sbrs	r22, 0
     a3a:	1b c0       	rjmp	.+54     	; 0xa72 <__floatsisf+0x6c>
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	8f 4f       	sbci	r24, 0xFF	; 255
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	16 c0       	rjmp	.+44     	; 0xa72 <__floatsisf+0x6c>
     a46:	88 23       	and	r24, r24
     a48:	11 f0       	breq	.+4      	; 0xa4e <__floatsisf+0x48>
     a4a:	96 e9       	ldi	r25, 0x96	; 150
     a4c:	11 c0       	rjmp	.+34     	; 0xa70 <__floatsisf+0x6a>
     a4e:	77 23       	and	r23, r23
     a50:	21 f0       	breq	.+8      	; 0xa5a <__floatsisf+0x54>
     a52:	9e e8       	ldi	r25, 0x8E	; 142
     a54:	87 2f       	mov	r24, r23
     a56:	76 2f       	mov	r23, r22
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <__floatsisf+0x5e>
     a5a:	66 23       	and	r22, r22
     a5c:	71 f0       	breq	.+28     	; 0xa7a <__floatsisf+0x74>
     a5e:	96 e8       	ldi	r25, 0x86	; 134
     a60:	86 2f       	mov	r24, r22
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	2a f0       	brmi	.+10     	; 0xa72 <__floatsisf+0x6c>
     a68:	9a 95       	dec	r25
     a6a:	66 0f       	add	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	88 1f       	adc	r24, r24
     a70:	da f7       	brpl	.-10     	; 0xa68 <__floatsisf+0x62>
     a72:	88 0f       	add	r24, r24
     a74:	96 95       	lsr	r25
     a76:	87 95       	ror	r24
     a78:	97 f9       	bld	r25, 7
     a7a:	08 95       	ret

00000a7c <__fp_split3>:
     a7c:	57 fd       	sbrc	r21, 7
     a7e:	90 58       	subi	r25, 0x80	; 128
     a80:	44 0f       	add	r20, r20
     a82:	55 1f       	adc	r21, r21
     a84:	59 f0       	breq	.+22     	; 0xa9c <__fp_splitA+0x10>
     a86:	5f 3f       	cpi	r21, 0xFF	; 255
     a88:	71 f0       	breq	.+28     	; 0xaa6 <__fp_splitA+0x1a>
     a8a:	47 95       	ror	r20

00000a8c <__fp_splitA>:
     a8c:	88 0f       	add	r24, r24
     a8e:	97 fb       	bst	r25, 7
     a90:	99 1f       	adc	r25, r25
     a92:	61 f0       	breq	.+24     	; 0xaac <__fp_splitA+0x20>
     a94:	9f 3f       	cpi	r25, 0xFF	; 255
     a96:	79 f0       	breq	.+30     	; 0xab6 <__fp_splitA+0x2a>
     a98:	87 95       	ror	r24
     a9a:	08 95       	ret
     a9c:	12 16       	cp	r1, r18
     a9e:	13 06       	cpc	r1, r19
     aa0:	14 06       	cpc	r1, r20
     aa2:	55 1f       	adc	r21, r21
     aa4:	f2 cf       	rjmp	.-28     	; 0xa8a <__fp_split3+0xe>
     aa6:	46 95       	lsr	r20
     aa8:	f1 df       	rcall	.-30     	; 0xa8c <__fp_splitA>
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <__fp_splitA+0x30>
     aac:	16 16       	cp	r1, r22
     aae:	17 06       	cpc	r1, r23
     ab0:	18 06       	cpc	r1, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	f1 cf       	rjmp	.-30     	; 0xa98 <__fp_splitA+0xc>
     ab6:	86 95       	lsr	r24
     ab8:	71 05       	cpc	r23, r1
     aba:	61 05       	cpc	r22, r1
     abc:	08 94       	sec
     abe:	08 95       	ret

00000ac0 <__fp_zero>:
     ac0:	e8 94       	clt

00000ac2 <__fp_szero>:
     ac2:	bb 27       	eor	r27, r27
     ac4:	66 27       	eor	r22, r22
     ac6:	77 27       	eor	r23, r23
     ac8:	cb 01       	movw	r24, r22
     aca:	97 f9       	bld	r25, 7
     acc:	08 95       	ret

00000ace <__mulsf3>:
     ace:	0b d0       	rcall	.+22     	; 0xae6 <__mulsf3x>
     ad0:	78 c0       	rjmp	.+240    	; 0xbc2 <__fp_round>
     ad2:	69 d0       	rcall	.+210    	; 0xba6 <__fp_pscA>
     ad4:	28 f0       	brcs	.+10     	; 0xae0 <__mulsf3+0x12>
     ad6:	6e d0       	rcall	.+220    	; 0xbb4 <__fp_pscB>
     ad8:	18 f0       	brcs	.+6      	; 0xae0 <__mulsf3+0x12>
     ada:	95 23       	and	r25, r21
     adc:	09 f0       	breq	.+2      	; 0xae0 <__mulsf3+0x12>
     ade:	5a c0       	rjmp	.+180    	; 0xb94 <__fp_inf>
     ae0:	5f c0       	rjmp	.+190    	; 0xba0 <__fp_nan>
     ae2:	11 24       	eor	r1, r1
     ae4:	ee cf       	rjmp	.-36     	; 0xac2 <__fp_szero>

00000ae6 <__mulsf3x>:
     ae6:	ca df       	rcall	.-108    	; 0xa7c <__fp_split3>
     ae8:	a0 f3       	brcs	.-24     	; 0xad2 <__mulsf3+0x4>

00000aea <__mulsf3_pse>:
     aea:	95 9f       	mul	r25, r21
     aec:	d1 f3       	breq	.-12     	; 0xae2 <__mulsf3+0x14>
     aee:	95 0f       	add	r25, r21
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	55 1f       	adc	r21, r21
     af4:	62 9f       	mul	r22, r18
     af6:	f0 01       	movw	r30, r0
     af8:	72 9f       	mul	r23, r18
     afa:	bb 27       	eor	r27, r27
     afc:	f0 0d       	add	r31, r0
     afe:	b1 1d       	adc	r27, r1
     b00:	63 9f       	mul	r22, r19
     b02:	aa 27       	eor	r26, r26
     b04:	f0 0d       	add	r31, r0
     b06:	b1 1d       	adc	r27, r1
     b08:	aa 1f       	adc	r26, r26
     b0a:	64 9f       	mul	r22, r20
     b0c:	66 27       	eor	r22, r22
     b0e:	b0 0d       	add	r27, r0
     b10:	a1 1d       	adc	r26, r1
     b12:	66 1f       	adc	r22, r22
     b14:	82 9f       	mul	r24, r18
     b16:	22 27       	eor	r18, r18
     b18:	b0 0d       	add	r27, r0
     b1a:	a1 1d       	adc	r26, r1
     b1c:	62 1f       	adc	r22, r18
     b1e:	73 9f       	mul	r23, r19
     b20:	b0 0d       	add	r27, r0
     b22:	a1 1d       	adc	r26, r1
     b24:	62 1f       	adc	r22, r18
     b26:	83 9f       	mul	r24, r19
     b28:	a0 0d       	add	r26, r0
     b2a:	61 1d       	adc	r22, r1
     b2c:	22 1f       	adc	r18, r18
     b2e:	74 9f       	mul	r23, r20
     b30:	33 27       	eor	r19, r19
     b32:	a0 0d       	add	r26, r0
     b34:	61 1d       	adc	r22, r1
     b36:	23 1f       	adc	r18, r19
     b38:	84 9f       	mul	r24, r20
     b3a:	60 0d       	add	r22, r0
     b3c:	21 1d       	adc	r18, r1
     b3e:	82 2f       	mov	r24, r18
     b40:	76 2f       	mov	r23, r22
     b42:	6a 2f       	mov	r22, r26
     b44:	11 24       	eor	r1, r1
     b46:	9f 57       	subi	r25, 0x7F	; 127
     b48:	50 40       	sbci	r21, 0x00	; 0
     b4a:	8a f0       	brmi	.+34     	; 0xb6e <__mulsf3_pse+0x84>
     b4c:	e1 f0       	breq	.+56     	; 0xb86 <__mulsf3_pse+0x9c>
     b4e:	88 23       	and	r24, r24
     b50:	4a f0       	brmi	.+18     	; 0xb64 <__mulsf3_pse+0x7a>
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	bb 1f       	adc	r27, r27
     b58:	66 1f       	adc	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	91 50       	subi	r25, 0x01	; 1
     b60:	50 40       	sbci	r21, 0x00	; 0
     b62:	a9 f7       	brne	.-22     	; 0xb4e <__mulsf3_pse+0x64>
     b64:	9e 3f       	cpi	r25, 0xFE	; 254
     b66:	51 05       	cpc	r21, r1
     b68:	70 f0       	brcs	.+28     	; 0xb86 <__mulsf3_pse+0x9c>
     b6a:	14 c0       	rjmp	.+40     	; 0xb94 <__fp_inf>
     b6c:	aa cf       	rjmp	.-172    	; 0xac2 <__fp_szero>
     b6e:	5f 3f       	cpi	r21, 0xFF	; 255
     b70:	ec f3       	brlt	.-6      	; 0xb6c <__mulsf3_pse+0x82>
     b72:	98 3e       	cpi	r25, 0xE8	; 232
     b74:	dc f3       	brlt	.-10     	; 0xb6c <__mulsf3_pse+0x82>
     b76:	86 95       	lsr	r24
     b78:	77 95       	ror	r23
     b7a:	67 95       	ror	r22
     b7c:	b7 95       	ror	r27
     b7e:	f7 95       	ror	r31
     b80:	e7 95       	ror	r30
     b82:	9f 5f       	subi	r25, 0xFF	; 255
     b84:	c1 f7       	brne	.-16     	; 0xb76 <__mulsf3_pse+0x8c>
     b86:	fe 2b       	or	r31, r30
     b88:	88 0f       	add	r24, r24
     b8a:	91 1d       	adc	r25, r1
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	97 f9       	bld	r25, 7
     b92:	08 95       	ret

00000b94 <__fp_inf>:
     b94:	97 f9       	bld	r25, 7
     b96:	9f 67       	ori	r25, 0x7F	; 127
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <__fp_nan>:
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	80 ec       	ldi	r24, 0xC0	; 192
     ba4:	08 95       	ret

00000ba6 <__fp_pscA>:
     ba6:	00 24       	eor	r0, r0
     ba8:	0a 94       	dec	r0
     baa:	16 16       	cp	r1, r22
     bac:	17 06       	cpc	r1, r23
     bae:	18 06       	cpc	r1, r24
     bb0:	09 06       	cpc	r0, r25
     bb2:	08 95       	ret

00000bb4 <__fp_pscB>:
     bb4:	00 24       	eor	r0, r0
     bb6:	0a 94       	dec	r0
     bb8:	12 16       	cp	r1, r18
     bba:	13 06       	cpc	r1, r19
     bbc:	14 06       	cpc	r1, r20
     bbe:	05 06       	cpc	r0, r21
     bc0:	08 95       	ret

00000bc2 <__fp_round>:
     bc2:	09 2e       	mov	r0, r25
     bc4:	03 94       	inc	r0
     bc6:	00 0c       	add	r0, r0
     bc8:	11 f4       	brne	.+4      	; 0xbce <__fp_round+0xc>
     bca:	88 23       	and	r24, r24
     bcc:	52 f0       	brmi	.+20     	; 0xbe2 <__fp_round+0x20>
     bce:	bb 0f       	add	r27, r27
     bd0:	40 f4       	brcc	.+16     	; 0xbe2 <__fp_round+0x20>
     bd2:	bf 2b       	or	r27, r31
     bd4:	11 f4       	brne	.+4      	; 0xbda <__fp_round+0x18>
     bd6:	60 ff       	sbrs	r22, 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__fp_round+0x20>
     bda:	6f 5f       	subi	r22, 0xFF	; 255
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	8f 4f       	sbci	r24, 0xFF	; 255
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	08 95       	ret

00000be4 <__udivmodsi4>:
     be4:	a1 e2       	ldi	r26, 0x21	; 33
     be6:	1a 2e       	mov	r1, r26
     be8:	aa 1b       	sub	r26, r26
     bea:	bb 1b       	sub	r27, r27
     bec:	fd 01       	movw	r30, r26
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <__udivmodsi4_ep>

00000bf0 <__udivmodsi4_loop>:
     bf0:	aa 1f       	adc	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	ee 1f       	adc	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	a2 17       	cp	r26, r18
     bfa:	b3 07       	cpc	r27, r19
     bfc:	e4 07       	cpc	r30, r20
     bfe:	f5 07       	cpc	r31, r21
     c00:	20 f0       	brcs	.+8      	; 0xc0a <__udivmodsi4_ep>
     c02:	a2 1b       	sub	r26, r18
     c04:	b3 0b       	sbc	r27, r19
     c06:	e4 0b       	sbc	r30, r20
     c08:	f5 0b       	sbc	r31, r21

00000c0a <__udivmodsi4_ep>:
     c0a:	66 1f       	adc	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	88 1f       	adc	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	1a 94       	dec	r1
     c14:	69 f7       	brne	.-38     	; 0xbf0 <__udivmodsi4_loop>
     c16:	60 95       	com	r22
     c18:	70 95       	com	r23
     c1a:	80 95       	com	r24
     c1c:	90 95       	com	r25
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	bd 01       	movw	r22, r26
     c24:	cf 01       	movw	r24, r30
     c26:	08 95       	ret

00000c28 <printf>:
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	ae 01       	movw	r20, r28
     c32:	4b 5f       	subi	r20, 0xFB	; 251
     c34:	5f 4f       	sbci	r21, 0xFF	; 255
     c36:	fa 01       	movw	r30, r20
     c38:	61 91       	ld	r22, Z+
     c3a:	71 91       	ld	r23, Z+
     c3c:	af 01       	movw	r20, r30
     c3e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__iob+0x2>
     c42:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__iob+0x3>
     c46:	03 d0       	rcall	.+6      	; 0xc4e <vfprintf>
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <vfprintf>:
     c4e:	2f 92       	push	r2
     c50:	3f 92       	push	r3
     c52:	4f 92       	push	r4
     c54:	5f 92       	push	r5
     c56:	6f 92       	push	r6
     c58:	7f 92       	push	r7
     c5a:	8f 92       	push	r8
     c5c:	9f 92       	push	r9
     c5e:	af 92       	push	r10
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	2b 97       	sbiw	r28, 0x0b	; 11
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	6c 01       	movw	r12, r24
     c84:	7b 01       	movw	r14, r22
     c86:	8a 01       	movw	r16, r20
     c88:	fc 01       	movw	r30, r24
     c8a:	17 82       	std	Z+7, r1	; 0x07
     c8c:	16 82       	std	Z+6, r1	; 0x06
     c8e:	83 81       	ldd	r24, Z+3	; 0x03
     c90:	81 ff       	sbrs	r24, 1
     c92:	bf c1       	rjmp	.+894    	; 0x1012 <vfprintf+0x3c4>
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	3c 01       	movw	r6, r24
     c9a:	f6 01       	movw	r30, r12
     c9c:	93 81       	ldd	r25, Z+3	; 0x03
     c9e:	f7 01       	movw	r30, r14
     ca0:	93 fd       	sbrc	r25, 3
     ca2:	85 91       	lpm	r24, Z+
     ca4:	93 ff       	sbrs	r25, 3
     ca6:	81 91       	ld	r24, Z+
     ca8:	7f 01       	movw	r14, r30
     caa:	88 23       	and	r24, r24
     cac:	09 f4       	brne	.+2      	; 0xcb0 <vfprintf+0x62>
     cae:	ad c1       	rjmp	.+858    	; 0x100a <vfprintf+0x3bc>
     cb0:	85 32       	cpi	r24, 0x25	; 37
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <vfprintf+0x74>
     cb4:	93 fd       	sbrc	r25, 3
     cb6:	85 91       	lpm	r24, Z+
     cb8:	93 ff       	sbrs	r25, 3
     cba:	81 91       	ld	r24, Z+
     cbc:	7f 01       	movw	r14, r30
     cbe:	85 32       	cpi	r24, 0x25	; 37
     cc0:	21 f4       	brne	.+8      	; 0xcca <vfprintf+0x7c>
     cc2:	b6 01       	movw	r22, r12
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	d6 d1       	rcall	.+940    	; 0x1074 <fputc>
     cc8:	e8 cf       	rjmp	.-48     	; 0xc9a <vfprintf+0x4c>
     cca:	91 2c       	mov	r9, r1
     ccc:	21 2c       	mov	r2, r1
     cce:	31 2c       	mov	r3, r1
     cd0:	ff e1       	ldi	r31, 0x1F	; 31
     cd2:	f3 15       	cp	r31, r3
     cd4:	d8 f0       	brcs	.+54     	; 0xd0c <vfprintf+0xbe>
     cd6:	8b 32       	cpi	r24, 0x2B	; 43
     cd8:	79 f0       	breq	.+30     	; 0xcf8 <vfprintf+0xaa>
     cda:	38 f4       	brcc	.+14     	; 0xcea <vfprintf+0x9c>
     cdc:	80 32       	cpi	r24, 0x20	; 32
     cde:	79 f0       	breq	.+30     	; 0xcfe <vfprintf+0xb0>
     ce0:	83 32       	cpi	r24, 0x23	; 35
     ce2:	a1 f4       	brne	.+40     	; 0xd0c <vfprintf+0xbe>
     ce4:	23 2d       	mov	r18, r3
     ce6:	20 61       	ori	r18, 0x10	; 16
     ce8:	1d c0       	rjmp	.+58     	; 0xd24 <vfprintf+0xd6>
     cea:	8d 32       	cpi	r24, 0x2D	; 45
     cec:	61 f0       	breq	.+24     	; 0xd06 <vfprintf+0xb8>
     cee:	80 33       	cpi	r24, 0x30	; 48
     cf0:	69 f4       	brne	.+26     	; 0xd0c <vfprintf+0xbe>
     cf2:	23 2d       	mov	r18, r3
     cf4:	21 60       	ori	r18, 0x01	; 1
     cf6:	16 c0       	rjmp	.+44     	; 0xd24 <vfprintf+0xd6>
     cf8:	83 2d       	mov	r24, r3
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	38 2e       	mov	r3, r24
     cfe:	e3 2d       	mov	r30, r3
     d00:	e4 60       	ori	r30, 0x04	; 4
     d02:	3e 2e       	mov	r3, r30
     d04:	2a c0       	rjmp	.+84     	; 0xd5a <vfprintf+0x10c>
     d06:	f3 2d       	mov	r31, r3
     d08:	f8 60       	ori	r31, 0x08	; 8
     d0a:	1d c0       	rjmp	.+58     	; 0xd46 <vfprintf+0xf8>
     d0c:	37 fc       	sbrc	r3, 7
     d0e:	2d c0       	rjmp	.+90     	; 0xd6a <vfprintf+0x11c>
     d10:	20 ed       	ldi	r18, 0xD0	; 208
     d12:	28 0f       	add	r18, r24
     d14:	2a 30       	cpi	r18, 0x0A	; 10
     d16:	40 f0       	brcs	.+16     	; 0xd28 <vfprintf+0xda>
     d18:	8e 32       	cpi	r24, 0x2E	; 46
     d1a:	b9 f4       	brne	.+46     	; 0xd4a <vfprintf+0xfc>
     d1c:	36 fc       	sbrc	r3, 6
     d1e:	75 c1       	rjmp	.+746    	; 0x100a <vfprintf+0x3bc>
     d20:	23 2d       	mov	r18, r3
     d22:	20 64       	ori	r18, 0x40	; 64
     d24:	32 2e       	mov	r3, r18
     d26:	19 c0       	rjmp	.+50     	; 0xd5a <vfprintf+0x10c>
     d28:	36 fe       	sbrs	r3, 6
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0xea>
     d2c:	8a e0       	ldi	r24, 0x0A	; 10
     d2e:	98 9e       	mul	r9, r24
     d30:	20 0d       	add	r18, r0
     d32:	11 24       	eor	r1, r1
     d34:	92 2e       	mov	r9, r18
     d36:	11 c0       	rjmp	.+34     	; 0xd5a <vfprintf+0x10c>
     d38:	ea e0       	ldi	r30, 0x0A	; 10
     d3a:	2e 9e       	mul	r2, r30
     d3c:	20 0d       	add	r18, r0
     d3e:	11 24       	eor	r1, r1
     d40:	22 2e       	mov	r2, r18
     d42:	f3 2d       	mov	r31, r3
     d44:	f0 62       	ori	r31, 0x20	; 32
     d46:	3f 2e       	mov	r3, r31
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <vfprintf+0x10c>
     d4a:	8c 36       	cpi	r24, 0x6C	; 108
     d4c:	21 f4       	brne	.+8      	; 0xd56 <vfprintf+0x108>
     d4e:	83 2d       	mov	r24, r3
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	38 2e       	mov	r3, r24
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0x10c>
     d56:	88 36       	cpi	r24, 0x68	; 104
     d58:	41 f4       	brne	.+16     	; 0xd6a <vfprintf+0x11c>
     d5a:	f7 01       	movw	r30, r14
     d5c:	93 fd       	sbrc	r25, 3
     d5e:	85 91       	lpm	r24, Z+
     d60:	93 ff       	sbrs	r25, 3
     d62:	81 91       	ld	r24, Z+
     d64:	7f 01       	movw	r14, r30
     d66:	81 11       	cpse	r24, r1
     d68:	b3 cf       	rjmp	.-154    	; 0xcd0 <vfprintf+0x82>
     d6a:	98 2f       	mov	r25, r24
     d6c:	9f 7d       	andi	r25, 0xDF	; 223
     d6e:	95 54       	subi	r25, 0x45	; 69
     d70:	93 30       	cpi	r25, 0x03	; 3
     d72:	28 f4       	brcc	.+10     	; 0xd7e <vfprintf+0x130>
     d74:	0c 5f       	subi	r16, 0xFC	; 252
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	9f e3       	ldi	r25, 0x3F	; 63
     d7a:	99 83       	std	Y+1, r25	; 0x01
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <vfprintf+0x14a>
     d7e:	83 36       	cpi	r24, 0x63	; 99
     d80:	31 f0       	breq	.+12     	; 0xd8e <vfprintf+0x140>
     d82:	83 37       	cpi	r24, 0x73	; 115
     d84:	71 f0       	breq	.+28     	; 0xda2 <vfprintf+0x154>
     d86:	83 35       	cpi	r24, 0x53	; 83
     d88:	09 f0       	breq	.+2      	; 0xd8c <vfprintf+0x13e>
     d8a:	55 c0       	rjmp	.+170    	; 0xe36 <vfprintf+0x1e8>
     d8c:	20 c0       	rjmp	.+64     	; 0xdce <vfprintf+0x180>
     d8e:	f8 01       	movw	r30, r16
     d90:	80 81       	ld	r24, Z
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	0e 5f       	subi	r16, 0xFE	; 254
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	88 24       	eor	r8, r8
     d9a:	83 94       	inc	r8
     d9c:	91 2c       	mov	r9, r1
     d9e:	53 01       	movw	r10, r6
     da0:	12 c0       	rjmp	.+36     	; 0xdc6 <vfprintf+0x178>
     da2:	28 01       	movw	r4, r16
     da4:	f2 e0       	ldi	r31, 0x02	; 2
     da6:	4f 0e       	add	r4, r31
     da8:	51 1c       	adc	r5, r1
     daa:	f8 01       	movw	r30, r16
     dac:	a0 80       	ld	r10, Z
     dae:	b1 80       	ldd	r11, Z+1	; 0x01
     db0:	36 fe       	sbrs	r3, 6
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x16c>
     db4:	69 2d       	mov	r22, r9
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x170>
     dba:	6f ef       	ldi	r22, 0xFF	; 255
     dbc:	7f ef       	ldi	r23, 0xFF	; 255
     dbe:	c5 01       	movw	r24, r10
     dc0:	4e d1       	rcall	.+668    	; 0x105e <strnlen>
     dc2:	4c 01       	movw	r8, r24
     dc4:	82 01       	movw	r16, r4
     dc6:	f3 2d       	mov	r31, r3
     dc8:	ff 77       	andi	r31, 0x7F	; 127
     dca:	3f 2e       	mov	r3, r31
     dcc:	15 c0       	rjmp	.+42     	; 0xdf8 <vfprintf+0x1aa>
     dce:	28 01       	movw	r4, r16
     dd0:	22 e0       	ldi	r18, 0x02	; 2
     dd2:	42 0e       	add	r4, r18
     dd4:	51 1c       	adc	r5, r1
     dd6:	f8 01       	movw	r30, r16
     dd8:	a0 80       	ld	r10, Z
     dda:	b1 80       	ldd	r11, Z+1	; 0x01
     ddc:	36 fe       	sbrs	r3, 6
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <vfprintf+0x198>
     de0:	69 2d       	mov	r22, r9
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <vfprintf+0x19c>
     de6:	6f ef       	ldi	r22, 0xFF	; 255
     de8:	7f ef       	ldi	r23, 0xFF	; 255
     dea:	c5 01       	movw	r24, r10
     dec:	2d d1       	rcall	.+602    	; 0x1048 <strnlen_P>
     dee:	4c 01       	movw	r8, r24
     df0:	f3 2d       	mov	r31, r3
     df2:	f0 68       	ori	r31, 0x80	; 128
     df4:	3f 2e       	mov	r3, r31
     df6:	82 01       	movw	r16, r4
     df8:	33 fc       	sbrc	r3, 3
     dfa:	19 c0       	rjmp	.+50     	; 0xe2e <vfprintf+0x1e0>
     dfc:	82 2d       	mov	r24, r2
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	88 16       	cp	r8, r24
     e02:	99 06       	cpc	r9, r25
     e04:	a0 f4       	brcc	.+40     	; 0xe2e <vfprintf+0x1e0>
     e06:	b6 01       	movw	r22, r12
     e08:	80 e2       	ldi	r24, 0x20	; 32
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	33 d1       	rcall	.+614    	; 0x1074 <fputc>
     e0e:	2a 94       	dec	r2
     e10:	f5 cf       	rjmp	.-22     	; 0xdfc <vfprintf+0x1ae>
     e12:	f5 01       	movw	r30, r10
     e14:	37 fc       	sbrc	r3, 7
     e16:	85 91       	lpm	r24, Z+
     e18:	37 fe       	sbrs	r3, 7
     e1a:	81 91       	ld	r24, Z+
     e1c:	5f 01       	movw	r10, r30
     e1e:	b6 01       	movw	r22, r12
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	28 d1       	rcall	.+592    	; 0x1074 <fputc>
     e24:	21 10       	cpse	r2, r1
     e26:	2a 94       	dec	r2
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	82 1a       	sub	r8, r18
     e2c:	91 08       	sbc	r9, r1
     e2e:	81 14       	cp	r8, r1
     e30:	91 04       	cpc	r9, r1
     e32:	79 f7       	brne	.-34     	; 0xe12 <vfprintf+0x1c4>
     e34:	e1 c0       	rjmp	.+450    	; 0xff8 <vfprintf+0x3aa>
     e36:	84 36       	cpi	r24, 0x64	; 100
     e38:	11 f0       	breq	.+4      	; 0xe3e <vfprintf+0x1f0>
     e3a:	89 36       	cpi	r24, 0x69	; 105
     e3c:	39 f5       	brne	.+78     	; 0xe8c <vfprintf+0x23e>
     e3e:	f8 01       	movw	r30, r16
     e40:	37 fe       	sbrs	r3, 7
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <vfprintf+0x204>
     e44:	60 81       	ld	r22, Z
     e46:	71 81       	ldd	r23, Z+1	; 0x01
     e48:	82 81       	ldd	r24, Z+2	; 0x02
     e4a:	93 81       	ldd	r25, Z+3	; 0x03
     e4c:	0c 5f       	subi	r16, 0xFC	; 252
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x214>
     e52:	60 81       	ld	r22, Z
     e54:	71 81       	ldd	r23, Z+1	; 0x01
     e56:	07 2e       	mov	r0, r23
     e58:	00 0c       	add	r0, r0
     e5a:	88 0b       	sbc	r24, r24
     e5c:	99 0b       	sbc	r25, r25
     e5e:	0e 5f       	subi	r16, 0xFE	; 254
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	f3 2d       	mov	r31, r3
     e64:	ff 76       	andi	r31, 0x6F	; 111
     e66:	3f 2e       	mov	r3, r31
     e68:	97 ff       	sbrs	r25, 7
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <vfprintf+0x230>
     e6c:	90 95       	com	r25
     e6e:	80 95       	com	r24
     e70:	70 95       	com	r23
     e72:	61 95       	neg	r22
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	8f 4f       	sbci	r24, 0xFF	; 255
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	f0 68       	ori	r31, 0x80	; 128
     e7c:	3f 2e       	mov	r3, r31
     e7e:	2a e0       	ldi	r18, 0x0A	; 10
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	a3 01       	movw	r20, r6
     e84:	33 d1       	rcall	.+614    	; 0x10ec <__ultoa_invert>
     e86:	88 2e       	mov	r8, r24
     e88:	86 18       	sub	r8, r6
     e8a:	44 c0       	rjmp	.+136    	; 0xf14 <vfprintf+0x2c6>
     e8c:	85 37       	cpi	r24, 0x75	; 117
     e8e:	31 f4       	brne	.+12     	; 0xe9c <vfprintf+0x24e>
     e90:	23 2d       	mov	r18, r3
     e92:	2f 7e       	andi	r18, 0xEF	; 239
     e94:	b2 2e       	mov	r11, r18
     e96:	2a e0       	ldi	r18, 0x0A	; 10
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	25 c0       	rjmp	.+74     	; 0xee6 <vfprintf+0x298>
     e9c:	93 2d       	mov	r25, r3
     e9e:	99 7f       	andi	r25, 0xF9	; 249
     ea0:	b9 2e       	mov	r11, r25
     ea2:	8f 36       	cpi	r24, 0x6F	; 111
     ea4:	c1 f0       	breq	.+48     	; 0xed6 <vfprintf+0x288>
     ea6:	18 f4       	brcc	.+6      	; 0xeae <vfprintf+0x260>
     ea8:	88 35       	cpi	r24, 0x58	; 88
     eaa:	79 f0       	breq	.+30     	; 0xeca <vfprintf+0x27c>
     eac:	ae c0       	rjmp	.+348    	; 0x100a <vfprintf+0x3bc>
     eae:	80 37       	cpi	r24, 0x70	; 112
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <vfprintf+0x26a>
     eb2:	88 37       	cpi	r24, 0x78	; 120
     eb4:	21 f0       	breq	.+8      	; 0xebe <vfprintf+0x270>
     eb6:	a9 c0       	rjmp	.+338    	; 0x100a <vfprintf+0x3bc>
     eb8:	e9 2f       	mov	r30, r25
     eba:	e0 61       	ori	r30, 0x10	; 16
     ebc:	be 2e       	mov	r11, r30
     ebe:	b4 fe       	sbrs	r11, 4
     ec0:	0d c0       	rjmp	.+26     	; 0xedc <vfprintf+0x28e>
     ec2:	fb 2d       	mov	r31, r11
     ec4:	f4 60       	ori	r31, 0x04	; 4
     ec6:	bf 2e       	mov	r11, r31
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <vfprintf+0x28e>
     eca:	34 fe       	sbrs	r3, 4
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <vfprintf+0x294>
     ece:	29 2f       	mov	r18, r25
     ed0:	26 60       	ori	r18, 0x06	; 6
     ed2:	b2 2e       	mov	r11, r18
     ed4:	06 c0       	rjmp	.+12     	; 0xee2 <vfprintf+0x294>
     ed6:	28 e0       	ldi	r18, 0x08	; 8
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <vfprintf+0x298>
     edc:	20 e1       	ldi	r18, 0x10	; 16
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x298>
     ee2:	20 e1       	ldi	r18, 0x10	; 16
     ee4:	32 e0       	ldi	r19, 0x02	; 2
     ee6:	f8 01       	movw	r30, r16
     ee8:	b7 fe       	sbrs	r11, 7
     eea:	07 c0       	rjmp	.+14     	; 0xefa <vfprintf+0x2ac>
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	0c 5f       	subi	r16, 0xFC	; 252
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <vfprintf+0x2b8>
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 5f       	subi	r16, 0xFE	; 254
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	a3 01       	movw	r20, r6
     f08:	f1 d0       	rcall	.+482    	; 0x10ec <__ultoa_invert>
     f0a:	88 2e       	mov	r8, r24
     f0c:	86 18       	sub	r8, r6
     f0e:	fb 2d       	mov	r31, r11
     f10:	ff 77       	andi	r31, 0x7F	; 127
     f12:	3f 2e       	mov	r3, r31
     f14:	36 fe       	sbrs	r3, 6
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <vfprintf+0x2e4>
     f18:	23 2d       	mov	r18, r3
     f1a:	2e 7f       	andi	r18, 0xFE	; 254
     f1c:	a2 2e       	mov	r10, r18
     f1e:	89 14       	cp	r8, r9
     f20:	58 f4       	brcc	.+22     	; 0xf38 <vfprintf+0x2ea>
     f22:	34 fe       	sbrs	r3, 4
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <vfprintf+0x2ee>
     f26:	32 fc       	sbrc	r3, 2
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <vfprintf+0x2ee>
     f2a:	83 2d       	mov	r24, r3
     f2c:	8e 7e       	andi	r24, 0xEE	; 238
     f2e:	a8 2e       	mov	r10, r24
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <vfprintf+0x2ee>
     f32:	b8 2c       	mov	r11, r8
     f34:	a3 2c       	mov	r10, r3
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <vfprintf+0x2f0>
     f38:	b8 2c       	mov	r11, r8
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <vfprintf+0x2f0>
     f3c:	b9 2c       	mov	r11, r9
     f3e:	a4 fe       	sbrs	r10, 4
     f40:	0f c0       	rjmp	.+30     	; 0xf60 <vfprintf+0x312>
     f42:	fe 01       	movw	r30, r28
     f44:	e8 0d       	add	r30, r8
     f46:	f1 1d       	adc	r31, r1
     f48:	80 81       	ld	r24, Z
     f4a:	80 33       	cpi	r24, 0x30	; 48
     f4c:	21 f4       	brne	.+8      	; 0xf56 <vfprintf+0x308>
     f4e:	9a 2d       	mov	r25, r10
     f50:	99 7e       	andi	r25, 0xE9	; 233
     f52:	a9 2e       	mov	r10, r25
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <vfprintf+0x31a>
     f56:	a2 fe       	sbrs	r10, 2
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <vfprintf+0x318>
     f5a:	b3 94       	inc	r11
     f5c:	b3 94       	inc	r11
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <vfprintf+0x31a>
     f60:	8a 2d       	mov	r24, r10
     f62:	86 78       	andi	r24, 0x86	; 134
     f64:	09 f0       	breq	.+2      	; 0xf68 <vfprintf+0x31a>
     f66:	b3 94       	inc	r11
     f68:	a3 fc       	sbrc	r10, 3
     f6a:	10 c0       	rjmp	.+32     	; 0xf8c <vfprintf+0x33e>
     f6c:	a0 fe       	sbrs	r10, 0
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <vfprintf+0x32e>
     f70:	b2 14       	cp	r11, r2
     f72:	80 f4       	brcc	.+32     	; 0xf94 <vfprintf+0x346>
     f74:	28 0c       	add	r2, r8
     f76:	92 2c       	mov	r9, r2
     f78:	9b 18       	sub	r9, r11
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <vfprintf+0x348>
     f7c:	b2 14       	cp	r11, r2
     f7e:	58 f4       	brcc	.+22     	; 0xf96 <vfprintf+0x348>
     f80:	b6 01       	movw	r22, r12
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	76 d0       	rcall	.+236    	; 0x1074 <fputc>
     f88:	b3 94       	inc	r11
     f8a:	f8 cf       	rjmp	.-16     	; 0xf7c <vfprintf+0x32e>
     f8c:	b2 14       	cp	r11, r2
     f8e:	18 f4       	brcc	.+6      	; 0xf96 <vfprintf+0x348>
     f90:	2b 18       	sub	r2, r11
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <vfprintf+0x34a>
     f94:	98 2c       	mov	r9, r8
     f96:	21 2c       	mov	r2, r1
     f98:	a4 fe       	sbrs	r10, 4
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <vfprintf+0x36c>
     f9c:	b6 01       	movw	r22, r12
     f9e:	80 e3       	ldi	r24, 0x30	; 48
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	68 d0       	rcall	.+208    	; 0x1074 <fputc>
     fa4:	a2 fe       	sbrs	r10, 2
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <vfprintf+0x386>
     fa8:	a1 fc       	sbrc	r10, 1
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <vfprintf+0x364>
     fac:	88 e7       	ldi	r24, 0x78	; 120
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <vfprintf+0x368>
     fb2:	88 e5       	ldi	r24, 0x58	; 88
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	b6 01       	movw	r22, r12
     fb8:	0c c0       	rjmp	.+24     	; 0xfd2 <vfprintf+0x384>
     fba:	8a 2d       	mov	r24, r10
     fbc:	86 78       	andi	r24, 0x86	; 134
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <vfprintf+0x386>
     fc0:	a1 fe       	sbrs	r10, 1
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <vfprintf+0x37a>
     fc4:	8b e2       	ldi	r24, 0x2B	; 43
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <vfprintf+0x37c>
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	a7 fc       	sbrc	r10, 7
     fcc:	8d e2       	ldi	r24, 0x2D	; 45
     fce:	b6 01       	movw	r22, r12
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	50 d0       	rcall	.+160    	; 0x1074 <fputc>
     fd4:	89 14       	cp	r8, r9
     fd6:	30 f4       	brcc	.+12     	; 0xfe4 <vfprintf+0x396>
     fd8:	b6 01       	movw	r22, r12
     fda:	80 e3       	ldi	r24, 0x30	; 48
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	4a d0       	rcall	.+148    	; 0x1074 <fputc>
     fe0:	9a 94       	dec	r9
     fe2:	f8 cf       	rjmp	.-16     	; 0xfd4 <vfprintf+0x386>
     fe4:	8a 94       	dec	r8
     fe6:	f3 01       	movw	r30, r6
     fe8:	e8 0d       	add	r30, r8
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	b6 01       	movw	r22, r12
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	40 d0       	rcall	.+128    	; 0x1074 <fputc>
     ff4:	81 10       	cpse	r8, r1
     ff6:	f6 cf       	rjmp	.-20     	; 0xfe4 <vfprintf+0x396>
     ff8:	22 20       	and	r2, r2
     ffa:	09 f4       	brne	.+2      	; 0xffe <vfprintf+0x3b0>
     ffc:	4e ce       	rjmp	.-868    	; 0xc9a <vfprintf+0x4c>
     ffe:	b6 01       	movw	r22, r12
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	37 d0       	rcall	.+110    	; 0x1074 <fputc>
    1006:	2a 94       	dec	r2
    1008:	f7 cf       	rjmp	.-18     	; 0xff8 <vfprintf+0x3aa>
    100a:	f6 01       	movw	r30, r12
    100c:	86 81       	ldd	r24, Z+6	; 0x06
    100e:	97 81       	ldd	r25, Z+7	; 0x07
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0x3c8>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	2b 96       	adiw	r28, 0x0b	; 11
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <strnlen_P>:
    1048:	fc 01       	movw	r30, r24
    104a:	05 90       	lpm	r0, Z+
    104c:	61 50       	subi	r22, 0x01	; 1
    104e:	70 40       	sbci	r23, 0x00	; 0
    1050:	01 10       	cpse	r0, r1
    1052:	d8 f7       	brcc	.-10     	; 0x104a <strnlen_P+0x2>
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	8e 0f       	add	r24, r30
    105a:	9f 1f       	adc	r25, r31
    105c:	08 95       	ret

0000105e <strnlen>:
    105e:	fc 01       	movw	r30, r24
    1060:	61 50       	subi	r22, 0x01	; 1
    1062:	70 40       	sbci	r23, 0x00	; 0
    1064:	01 90       	ld	r0, Z+
    1066:	01 10       	cpse	r0, r1
    1068:	d8 f7       	brcc	.-10     	; 0x1060 <strnlen+0x2>
    106a:	80 95       	com	r24
    106c:	90 95       	com	r25
    106e:	8e 0f       	add	r24, r30
    1070:	9f 1f       	adc	r25, r31
    1072:	08 95       	ret

00001074 <fputc>:
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	fb 01       	movw	r30, r22
    107e:	23 81       	ldd	r18, Z+3	; 0x03
    1080:	21 fd       	sbrc	r18, 1
    1082:	03 c0       	rjmp	.+6      	; 0x108a <fputc+0x16>
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
    1088:	2c c0       	rjmp	.+88     	; 0x10e2 <fputc+0x6e>
    108a:	22 ff       	sbrs	r18, 2
    108c:	16 c0       	rjmp	.+44     	; 0x10ba <fputc+0x46>
    108e:	46 81       	ldd	r20, Z+6	; 0x06
    1090:	57 81       	ldd	r21, Z+7	; 0x07
    1092:	24 81       	ldd	r18, Z+4	; 0x04
    1094:	35 81       	ldd	r19, Z+5	; 0x05
    1096:	42 17       	cp	r20, r18
    1098:	53 07       	cpc	r21, r19
    109a:	44 f4       	brge	.+16     	; 0x10ac <fputc+0x38>
    109c:	a0 81       	ld	r26, Z
    109e:	b1 81       	ldd	r27, Z+1	; 0x01
    10a0:	9d 01       	movw	r18, r26
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	20 83       	st	Z, r18
    10aa:	8c 93       	st	X, r24
    10ac:	26 81       	ldd	r18, Z+6	; 0x06
    10ae:	37 81       	ldd	r19, Z+7	; 0x07
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	37 83       	std	Z+7, r19	; 0x07
    10b6:	26 83       	std	Z+6, r18	; 0x06
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <fputc+0x6e>
    10ba:	8b 01       	movw	r16, r22
    10bc:	ec 01       	movw	r28, r24
    10be:	fb 01       	movw	r30, r22
    10c0:	00 84       	ldd	r0, Z+8	; 0x08
    10c2:	f1 85       	ldd	r31, Z+9	; 0x09
    10c4:	e0 2d       	mov	r30, r0
    10c6:	09 95       	icall
    10c8:	89 2b       	or	r24, r25
    10ca:	e1 f6       	brne	.-72     	; 0x1084 <fputc+0x10>
    10cc:	d8 01       	movw	r26, r16
    10ce:	16 96       	adiw	r26, 0x06	; 6
    10d0:	8d 91       	ld	r24, X+
    10d2:	9c 91       	ld	r25, X
    10d4:	17 97       	sbiw	r26, 0x07	; 7
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	17 96       	adiw	r26, 0x07	; 7
    10da:	9c 93       	st	X, r25
    10dc:	8e 93       	st	-X, r24
    10de:	16 97       	sbiw	r26, 0x06	; 6
    10e0:	ce 01       	movw	r24, r28
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <__ultoa_invert>:
    10ec:	fa 01       	movw	r30, r20
    10ee:	aa 27       	eor	r26, r26
    10f0:	28 30       	cpi	r18, 0x08	; 8
    10f2:	51 f1       	breq	.+84     	; 0x1148 <__stack+0x49>
    10f4:	20 31       	cpi	r18, 0x10	; 16
    10f6:	81 f1       	breq	.+96     	; 0x1158 <__stack+0x59>
    10f8:	e8 94       	clt
    10fa:	6f 93       	push	r22
    10fc:	6e 7f       	andi	r22, 0xFE	; 254
    10fe:	6e 5f       	subi	r22, 0xFE	; 254
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	af 4f       	sbci	r26, 0xFF	; 255
    1108:	b1 e0       	ldi	r27, 0x01	; 1
    110a:	3e d0       	rcall	.+124    	; 0x1188 <__stack+0x89>
    110c:	b4 e0       	ldi	r27, 0x04	; 4
    110e:	3c d0       	rcall	.+120    	; 0x1188 <__stack+0x89>
    1110:	67 0f       	add	r22, r23
    1112:	78 1f       	adc	r23, r24
    1114:	89 1f       	adc	r24, r25
    1116:	9a 1f       	adc	r25, r26
    1118:	a1 1d       	adc	r26, r1
    111a:	68 0f       	add	r22, r24
    111c:	79 1f       	adc	r23, r25
    111e:	8a 1f       	adc	r24, r26
    1120:	91 1d       	adc	r25, r1
    1122:	a1 1d       	adc	r26, r1
    1124:	6a 0f       	add	r22, r26
    1126:	71 1d       	adc	r23, r1
    1128:	81 1d       	adc	r24, r1
    112a:	91 1d       	adc	r25, r1
    112c:	a1 1d       	adc	r26, r1
    112e:	20 d0       	rcall	.+64     	; 0x1170 <__stack+0x71>
    1130:	09 f4       	brne	.+2      	; 0x1134 <__stack+0x35>
    1132:	68 94       	set
    1134:	3f 91       	pop	r19
    1136:	2a e0       	ldi	r18, 0x0A	; 10
    1138:	26 9f       	mul	r18, r22
    113a:	11 24       	eor	r1, r1
    113c:	30 19       	sub	r19, r0
    113e:	30 5d       	subi	r19, 0xD0	; 208
    1140:	31 93       	st	Z+, r19
    1142:	de f6       	brtc	.-74     	; 0x10fa <__ultoa_invert+0xe>
    1144:	cf 01       	movw	r24, r30
    1146:	08 95       	ret
    1148:	46 2f       	mov	r20, r22
    114a:	47 70       	andi	r20, 0x07	; 7
    114c:	40 5d       	subi	r20, 0xD0	; 208
    114e:	41 93       	st	Z+, r20
    1150:	b3 e0       	ldi	r27, 0x03	; 3
    1152:	0f d0       	rcall	.+30     	; 0x1172 <__stack+0x73>
    1154:	c9 f7       	brne	.-14     	; 0x1148 <__stack+0x49>
    1156:	f6 cf       	rjmp	.-20     	; 0x1144 <__stack+0x45>
    1158:	46 2f       	mov	r20, r22
    115a:	4f 70       	andi	r20, 0x0F	; 15
    115c:	40 5d       	subi	r20, 0xD0	; 208
    115e:	4a 33       	cpi	r20, 0x3A	; 58
    1160:	18 f0       	brcs	.+6      	; 0x1168 <__stack+0x69>
    1162:	49 5d       	subi	r20, 0xD9	; 217
    1164:	31 fd       	sbrc	r19, 1
    1166:	40 52       	subi	r20, 0x20	; 32
    1168:	41 93       	st	Z+, r20
    116a:	02 d0       	rcall	.+4      	; 0x1170 <__stack+0x71>
    116c:	a9 f7       	brne	.-22     	; 0x1158 <__stack+0x59>
    116e:	ea cf       	rjmp	.-44     	; 0x1144 <__stack+0x45>
    1170:	b4 e0       	ldi	r27, 0x04	; 4
    1172:	a6 95       	lsr	r26
    1174:	97 95       	ror	r25
    1176:	87 95       	ror	r24
    1178:	77 95       	ror	r23
    117a:	67 95       	ror	r22
    117c:	ba 95       	dec	r27
    117e:	c9 f7       	brne	.-14     	; 0x1172 <__stack+0x73>
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 05       	cpc	r22, r1
    1184:	71 05       	cpc	r23, r1
    1186:	08 95       	ret
    1188:	9b 01       	movw	r18, r22
    118a:	ac 01       	movw	r20, r24
    118c:	0a 2e       	mov	r0, r26
    118e:	06 94       	lsr	r0
    1190:	57 95       	ror	r21
    1192:	47 95       	ror	r20
    1194:	37 95       	ror	r19
    1196:	27 95       	ror	r18
    1198:	ba 95       	dec	r27
    119a:	c9 f7       	brne	.-14     	; 0x118e <__stack+0x8f>
    119c:	62 0f       	add	r22, r18
    119e:	73 1f       	adc	r23, r19
    11a0:	84 1f       	adc	r24, r20
    11a2:	95 1f       	adc	r25, r21
    11a4:	a0 1d       	adc	r26, r0
    11a6:	08 95       	ret

000011a8 <_exit>:
    11a8:	f8 94       	cli

000011aa <__stop_program>:
    11aa:	ff cf       	rjmp	.-2      	; 0x11aa <__stop_program>
